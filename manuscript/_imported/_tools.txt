# Tools for Living Documentation


--

At the time of writing, here are some of the available tools of particular interest for living documentation.

- Your programming language (s) and its extension capabilities
-



ASCII, little syntax, diagrammr, dot

- Cucumber, SpecFlow, DaSpec
- Markdown
- Graphviz
- Wordcloud


Swagger

- Maven site
- Maven Tree
- all CD tools



Svg, Graphviz, pandoc, js, neo4j, dataviz

- Markdown, yaml, even json for the content in itself, plus tools to render that into other documents
- interactive slideshow from markdown files with Reveal.js
- ASCIIDoc
- d3.js

- Diagrammr-like
- Structurizr



- custom parser


--
from peter hilton

Use Markdown or similar Things that seemed like a good idea at the time: troff, SGML, RTF, DocBook, XHTML, XSL-FO
Things that seem like a better idea now: Markdown, reStructuredText, AsciiDoc
The ultimate text markup language is still: HTML

GitHub repo - plain Markdown files
GitHub Pages - Jekyll site builder
GitHub Wiki - Gollum wiki
Read the Docs - Sphinx docs builder
Asciidoctor - asciidoc to many formats
Swagger - API docs structure and layout
Silk - API docs
---
literate programming

Arnaud Bailly

Extract the Clojure code to convert it into Latex (not ideal but working)

https://github.com/kovasb/session

Brute force solution as an oracle & as more accessible documentation

Formula in fitness + reconciliation of the test against the actual code;
Excel sheet as the actual reference: why copy-paste and lose the formula? Alternative formula as an oracle.
--
https://github.com/gdeer81/marginalia
