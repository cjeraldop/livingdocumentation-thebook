LD - from legacy monolith to microservices in a bank


## N+1 Documentation

In the usual case of a main module with nested sub-modules, there's an opportunity for documentation at all levels: in the main module, and in each sub-module.

At each level the documentation does not have the same focus. At the main module level, the scope is the whole system, hence focus is usually more on the the high-level problem side: goals, sponsors-facing information, stakeholders considerations, stakes and success criteria. At the sub-module level, the scope is smaller, and the focus is probably more on the lower-level solution side: design decisions, technical knowledge etc.

However it is still possible to keep the same format of documentation everywhere, for example in the form "problem-then-solution". It's always a good idea to state the problem before talking about any solution. Documentation of the main module will focus on the high-level goals, and will try not to constrain the possible solutions too much. In contrast, lower-level documentation in each module would elaborate more on the details of the important decisions.


@Evergreen
## Introduction and Goals

- Vision Statement
- problem to address / value to earn / to protect / risk to prevent
- list of stakeholder
- list of main capabilities to deliver

## Context & Constraints

What's the business and technical context of the system?

What kind of constraints restrict design decisions?

brief definition of task, quality goals, summary of architecturally relevant requirements, especially the non-functional reqs


# Solution Ideas and Strategy

## Parti

- Inspirations and bibliography
- The way the problem is tackled, and the overall description of the solution

A parti is the central idea or concept of a building
A parti diagram can describe massing, entrance, spatial hierarch... and many other concerns… Some will argue that an ideal parti is wholly inclusive – that it informs every aspect of a building from its original configuration and structural system to the shape of the doorknobs. Others believe that a perfect parti is neither attainable nor desirable.


## Business Domain View

@LivingDiagram
- Overview of the business domains
@LivingGlossary or @PlainTextGlossary
- Glossary by domain

How does the solution work? What are the fundamental solution approaches?

## Design Overview

- External Dependencies
- Technical Glossary
- Inspirations and bibliography
- ADR

5. Building Block View
Stativ structure of system, implementation Blocks.

6. Runtime View
Cooperation of (instances) of building blocks at runtime, relevant and important interactions.

7. Deployment View
Deployment: On which hardware will the building blocks be operated? What further information is required to operate the system?

8. Concepts
Recurring patterns and structures.
Business domain models.
Crosscutting (technical) concepts.
These concepts can often be re-used across systems.

9. Design Decisions
Important design decisions.

10. Quality Scenarios
Risks
Glossary & Important terms.


------

LD - Enforced Legacy Rules

# Legacy

You decided that some method should not be called anymore, except from one or two specific places. An example is you decided to turn a legacy application into a Legacy Read Model, which should not accept any request to update it except from the listener responsible to sync this read model to the other authoritative model.

The design decision can be stated this way:

> ”This model is a Read Model. It is therefore read-only. Don’t call this Save method, unless you are the listener which syncs this Read Model from the events sent from the Authoritative Write Model.”a

And its rationale is:

> The legacy system has proven to be un-maintenable so we don’t want to develop anymore in it. This is why we’re building a replacement as another system. But because so many external systems are integrated to it we can simply remove it in one go. This is why we decide to keep this old system just as a Legacy Read Model for integration purposes.

This can and should be documented of course. I’d do it this way:

- Mark the design decision with a custom annotation @LegacyReadModel with the message and the rationale
- Mark the method as @Deprecated

However being in a legacy system also means we have legacy teams around, some of them remote or in other departments, and we can never be sure they will read our documentation or email, or that they will pay attention when we mention that in our daily standup. However if some developers don’t respect the design decision then bad things will happen. We'll get bugs and pay the cost of extra accidental complexity due to the inconsistent data management strategies.

My colleague Igor Lovich came up with a simple way to document that decision as an Enforced Guideline. Our design decision becomes:

> ”Never call this method unless you’re in the White-List of the one or two classes responsible for the sync."

Which we can then enforce at runtime with a few lines of code:

- Capture the stack trace (e.g. throw an exception within a try-catch and extract its stack trace in Java)
- Check that at least one caller in the stack trace belongs to the White-List of authorized callers
- Make the check into a Java ‘assert', if you want to fail-fast in some environments but not all of them
- Log when the check fails in a way that will trigger specific follow-up (if it gets fired then it’s actually a defect)

-----



--

Manual documentation 1st, in particular about surprises, and about the guided tour. + blog?

--
**Beyond Doc: Hard to explain? This signals a potential for improvement and simplification!**

Denormalizer: no clear, with arrows from/to every box. But: No such box in standard CQRS diagrams!

**Consider: what would it take to come back to the standard situations of the literature?**

- we would move that part to the left, and the other part to the right. But then we would have this , so we can't! - It's hard or impossible to solve that as long as your thinking remains in the context of the existing situation which caused the problem in the first place. Step back, and consider how this purpose (not this implementation [ladybird comment]) is achieved in the standard literature. - Oh yes we could live the replay to the left, and it works :)

..
In practice legacy makes everything more complicated than the standard literature. The point is to find the simplest variation that preserves most of the benefits and that works in the particular context.
—
ADR
Samples proposed to include in book
--


Module Stereotypes (on packages in Java)

Command Gateway <
Query Gateway <
Denormalizer <>

Core-api
Domain
Query
--

documentation
- Axon
- Custom annotations
- Package & projects structure
- README & wiki

conformity
- Hexagonal-ity metrics? define inside vs. outside?
- Clustering as a tool to suggest re-engineering opportunities?
