  LD - journal


Living Glossary: a way to encourage the practice of actual DDD, with an unbiased feedback on the depth of practice, and a measure of signal to noise.

--
Documentation is Code for Humans

---
# No Documentation / Architecture

Want better documentation? Simplify and structure your design to make it possible!

> Entropy is "the information required to describe a system".
> -- Kent Beck (https://www.facebook.com/notes/kent-beck/entropy-as-understood-by-a-programmer-part-1-program-structure/695263730506494)

> Code written every which way requires detailed study of every line to understand what's going on. Code written according to a consistent and shared pattern language can be described more concisely. "Inline editing is implemented as a State of the Controller" -- if you know the vocabulary, you know what you'll find when you look at the code.

Fred George on the high frequency loop on Kafka and it's rivers etc -> can describe the whole architecture in less than one hour: GOOD!


—
Martin Fowler talk at O’Reilly conference
http://radar.oreilly.com/2015/03/highlights-oreilly-software-architecture-conference-2015.html?cmp=tw-na-na-article-na_20150319_twitter_sb_image

(heuristic for things worth documenting)
irreversible stuff is hard to change and correlates with what’s important -> worth documenting, or better, to fix!

Please describe the architecture using only 4 objects

Code already there is often used as an example; better be very nicely done to be exemplar! need to highlight the best examples as eel (curation) Examplar Code
--

## Shared Mental Models

Universal World Map
Metaphors

--


--
If you're about to manage skills matrix in a permanent fashion, you're already doomed!

Get it from the commit logs?
--


--
# Interactive Documentation (at runtime)

As a section name for visible workings

The documentation spectrum:
No, stable, refactor-friendly, living, interactive, beyond (no + less together)

The book is structured: living, interactive,
--
Group together things that change together. The rationale is to save time moving from on place to another, and to reduce the odds of forgetting a change somewhere.

methods and fields within the same class. Classes and interfaces in the same module.

Things that tend to change together.
Functional scenarios about the same feature changes together so we group them in the same story or feature file. At the higher-level, even features change together, so we group them into cohesive functional chapters.

+ mentioned examples
+ case study example
+ image
--


# on-demand
Instant media: conversation, flip chart, sketching, stickers, chat
--
Visible Workings / Visible Tests: tests that produce an output for humans
--
No Documentation -> disposable code à la micro services

NoDocumentation: exploring alternatives to documentation

No Documentation: we acknowledge the purpose of documentation, but we disagree with the way it's usually done. No Documentation is about exploring better alternatives for transferring knowledge between people and across time.
--


--


**Tools usage as documentation**
- Git commits comments, Jira tickets, emails, whiteboard pictures, chat, metrics

Complete and integrate into your documentation landscape, eg email integration into the wiki / PDF archiving by keywords
--

From Visible Workings

Todo: Using Patterns to Improve Our Architectural Vision, Norman L. Kerth and Ward Cunningham, IEEE Software, Vol. 14, No. 1, January/February, 1997, pp. 53 - 59.

**Software Archeology: Understanding Large Systems**

Chet Hendrickson

Software source code is one of the most densely packed forms of communication we have. But, it is still a form of human communication. Refactoring gives us a very powerful tool for improving our understanding of what someone else has written

**Experience Report: I Was a Smalltalk Gunslinger **
by Kevin Johnson
kmj@acm.org

I generally find that I don't really understand a system until I start making some fairly big changes.  Or maybe it comes down to not having the confidence to make big changes until I understand the system. Either way you will need to make changes eventually.


An automated reverse engineering tool would also be useful.  I don't want a tool to do “round trip engineering”.  In my opinion, if you extract enough detail to generate code, you might as well look at the code.  I want something that will help me draw the kind of medium detail diagrams that I currently do by hand.


Andy Schneider
**Make the value you’ve added permanent**

Comment code that you are working on so the next person doesn’t have to go through the same pain.
Find design documents to update and update them.
Document how to run any tests you’ve developed.
Give any useful scripts you’ve developed to the local toolsmith (there is always one).
--
Modeling questions heuristics

**Before**
Do your homework before: read about the topics, books, Google search, Wikipedia, investopedia, XML standards of the field

Know your patterns: design, DDD, analysis
Train in various modeling techniques: CRC Cards, UML in Color,

**During interview**
Ask Why? For who?
Identify stakeholders: Who decides that? Who would disagree with that?
Note the exact words
Ask for brief definition
Gimme an example please!
Mark each word mentioned for the first time
Challenge respectfully the domain experts: they may not always be right!
Pay attention to side remarks, and note them
Don't interrupt, take notes about ideas to come back to later
Pay attention to hesitations and to unconvincing answers
Ask for clarification whenever it seems that different words are used indifferently

Challenge internal consistency: confront two previous statements that could contradict with each other
Look for invariants
Challenge invariants

**After**
Code what you understood
Note every question, hesitation, contradiction for next interview

--
The higher level, the easiest to write and the more useful it is

--

Knowledge is already there, as long as everything is meaningful because it's carefully crafted.
--

# When no documentation is better


# Alternative media

--
TODO Rewrite solution patterns so that code is optional, and only keep as first-class patterns that work under any language

Move other application details and variants as secondary patterns. Add a "Related Tools" section.
—
Hand-Rolled Acceptance Testing Framework: Excel-based, programmatic for combinations
--
Standard Knowledge over Custom Folklore

Less code, less to document: the patterns to make it systematic etc. example of calculations with accuracy intervals.
--
lack of documentation as a hidden cost, just like the lack of tests
--

It's possible to add text files close to the related code, but it has all limitations of comments, plus it is not as close to the code than comments. You have to switch tabs in your text editor to go from the code to the text files and back.

It's also possible to add knowledge by using the built-in extension mechanism for your programming language, along with writing code just for the purpose of expressing useful knowledge, although many developers find it awkward to add code that don't add value to users at runtime.


--
Conversation that needs be written as a document
A question to request a document

--




--

# Living Diagram

A Living Diagram is a diagram that you can generate again on any change so that it's always up-to-date.

Why? Because surprise!


## Code-Driven Diagram: more refactoring-proof, but not totally

Programmatic diagrams, with dedicated code and/or application code, eg driven by a DSL that includes references to code

## Living Diagram: totally maintenance-free and with sincere feedback, more objective



--

--
Wikipedia on Living Document and Evergreen Document

The opposite would be already-obsolete documents, or Delusive Document, Instantly Obsolete Documents, Perishable Document

The "Documentation Delusion"
--
Tools Mylin intents (obeo) does the explicit traceability between documents and the relates source artifacts. This comes as a suite of tools in the ecosystem of the modeling solutions of the vendor.
--
# Legacy patterns

What you can't do well on terrible legacy
- living glossary

What you can do instead

## Visible Mess

## Visible Plan
transformation / rewriting / refactoring plan: not all the same thing!
--
# Designing Living Documentation for low maintenance

Couple the specific to the generic, not the other way round

Because it's more comfortable to couple the volatile to the stable than the over way round, otherwise the stable could not remain stable.

Typically the relationship from the volatile to the stable is many-to-one. So the heuristic could often be: link from the (potentially) many to the one. For people with some background in relational databases, this is familiar with the way foreign keys work.

How to link (don't link the other way round)
- Link the implementation to the contract or interface
- Link the code to the requirements
- Link the tests to the (public) code
- Link the artifacts to the project goals and constraints
- Link the goals to the stakeholders
- Link the goals to the vision

# Designing for refactoring-proof

Intrinsic
- Car color vs car beautiful or ugly
- Car is intrinsically red, vs not intrinsically "matching the color of my door"

As soon as the property of the thing depends on something else than the thing, it is not intrinsic. Avoid coupling in this case, for example use indirection.

Red button for president vs for Barack Obama. No need to rewrite the law each time there's a new president: that's refactoring-proof.

This is all the basic of cohesion and coupling, and this is helpful guidance for documentation too.

## Design Decision Records

Blog, chat, Markdown files in source control, wiki, Enums?

--

From static calls stack, exception stack trace or Runtime interception (how? aspects?) to sequence diagram

Test with a mock that throws an exception?

--

--
--
## Go the extra last mile

User guide "ready to click" or "ready to copy-paste" in the context of the user environment. This may require to propose one version for each major tool: curl, httpie; maven, gradle, ant;

--
How to:

- Declare Bounded Contexts
--
Commiters as custodian of knowledge (tribal knowledge)

"We're the only one with a knowledge of the whole project, we know better the impacts of any part to any other part"

--


--

--
Simple Learning through Koans (Russ Miles)
--
# In-situ knowledge / The expressed / codified knowledge assumption

Most knowledge is already there, somewhere in the code, in the config files or a script. But that does not mean it is easily accessible or fully complete. We propose to go the extra mile.

**Therefore: Add the little missing knowledge to make it complete, and add the little necessary automation to make it accessible to everyone, not just developers.**

--
Pretty Scenario from technical tests: functional event sourcing, test DSL

Spreadsheet-driven tests (Swapstream autogen)

Brian Marick: Omnigraffle to tests experiments

my colleague raphael: from excel flow charts to actual java workflow configuration through some VB conversion code.


--
Metaphors with glasses of beer

Reliable
- single source of truth: envelope with a transparent window, transparent glass of beer
- reconciliation: beer pint volume = cumulated volume of these glasses of beer (the real thing, its documentation, and a reconciliation process: pour the glasses into the pint and check it's filled)

Low-Effort
- Pour the beer and you get an updated documentation!

Collaborative
- Beer is just a by-product, what we are really after is an opportunity to spend time together, indeed for me and many of my friends it works as well with a glass of wine or champagne, or even a cup of tea!

Insightful: all these glasses of beer show me how much beer I'm about to drink, and I may better realize this is too much

Most of the knowledge is already there. All you need to do is to add the little bits that are missing and to make it more accessible and more useful.

Living Glossary: what are your consumption habits or favorite food brands? You could fill in a survey (a documentation), or you could just look at your garbage!

Living diagram: what are your typical meals? Just dump the garbage and layer by starters, main dishes and deserts.
--
Types, then properties, then unit tests

"Add a unit test for each error found by quickcheck; it's more readable."

"Types are the best doc" scalex, hoogle

Hole-driven development ("ctrl-space")

"It's on you to properly describe!" You may describe wrong

Expose a servlet at /api-docs that describes the API, with an API Info (title, license, author etc)

"The first thing in REST is: make sure everyone agrees on 1/ what each http verb means 2/ agree on the error codes"

--
Scaffolding over documentation (g8)
- generators / wizards
- templates
- scripts
- helpful exceptions

Of course the scaffolding has to be really easy to use without a user guide.
- asking simple questions, step by step
- with sensible default values
- with very good example of answers

Fix It over Known-Troubles Documentation

@UdiDahan: The best kind of documentation! RT @jbogard NServiceBus v5 exception msgs are awesome, they tell you how to *fix* problems in great detail

--

#why #when documentation #conversation
we’ve been looking at Swagger as a nice way of documenting all our APIs, internal and external, to reduce the interruptions when team A needs to consume component from team B
--
#design #deliberate

--
#sumplicity #vision #communication
@Paysonhall: Whiteboard rule: I've never seen a good IT system built without an architect who could describe it on a whiteboard in 5 minutes #PMOT

@doublehelix: @Paysonhall @gdinwiddie which generally means that every team member can describe a consistent outline of the system too.

@gdinwiddie: @doublehelix @Paysonhall Yes. And program with that picture in mind.
--
@KwalityRules: Documentation should be a tool, not a product.  @michaelbolton sharing @drcemkaner wisdom. #starwest

@michaelbolton: .@KwalityRules Oops, not quite. Try: you should be conscious of the degree to which your documentation is one or the other. @DrCemKaner
—
lean
* Consume your own output
* new & noteworthy
* show progress: Information Radiators: Wallboards
* “Good fences make good neighbors.”

With respect to Lean IT: Document your processes for each stage of the value stream
•        Employees should never struggle to know what to do
o   Visible working
o   The infamous clipboard, but better: embed the documentation within the tool
o   UX: teach the mental model by plain usage of the UI
•        A philosophy of built in fault detection facilitating faster recovery
o   Clear error reporting & exception handling; fail-safes is possible
o   Monitoring, Alerting & Dashboards (Andon)
--
* Avoiding documentation: simplicity, small scale, familiar subject
* Standards, Canned Knowledge...
* Stable Knowledge: vision, impact mapping, README...
* Self-Descriptive: Clean Code, Clean Tests, BDD, DSL
* Living Glossary: a glossary of the important vocabulary of the business domain, extracted from the source code on each build.
* Living Diagram: a diagram that you can generate on every change, so that it is always up-to-date.
* Documentation by Annotations
* Living Curation (by Annotations or Convention)
* Documentation by Conventions (Naming conventions, Folder tree...)
* Declarative Automation
* Enforced Rule
—

--
Automation (make it a script) over documentation (step by step guide)

Discussion on how to automate code generation from xsd before we'll all gone and nobody knows how to update that.
--
http://t.co/TqMpaRM9dG


--
@angelaharms: "If you replace a conversation with a document, you've stopped using stories." @jeffpatton at #AgileDayChicago2014
--
--

Living Glossary examples

Festival ticketing system: festival series, festival event, location, partners, capacity, overbooking strategy, pricing strategy (over time), line-up, ticket (unique id), ticket, legal notes // from kickstart example

Jsyn
--
--
"Quality of Service" requirements instead "non-functional"
--
Custom notation (eg Vaughn reactive book notation)

Documentation by contrast: "Here is what you know. Now we don't do like that. Instead we do this way."
--

--
@mattbarcomb:

work collaboratively
act intentionally
embrace uncertainty
--
## Runtime Self-Description

Messages Interception: intercept message at chosen end points then print then using introspection or any other formatting rule

Decorated Builder: the Decorator pattern applied to a Builder in order to print the recipe during the construction

Self-Describing Object Graph: using introspection, the Visitor pattern or plain polymorphism with a continuation passing style

Traceable Values: Value Object that remember internally where they come from

Inspectable Meta: plugins etc.

Homoiconicity: using the natural capacity of some languages to be able to process their own source code

Data Report / Query Report: business calendars printed for each day even though they are not stored
--
Reconciliation Cucumber tags vs tag index thanks to tests by @aloyer
--
Ld
Change-Friendly: embrace change, change will happen, and it means opportunities
Obviously Reliable
Low-Effort
Collaborative
Insightful

Alt:
Collaborative and Conversational
Insightful and Deliberate

--
Cheap metrics
@natpryce: Calculate total 'er-count' metric for a compiled Java project:

find . -name '*.class' | xargs -n 1 basename | grep -Eoi '(e|o)r' | wc -l
--
Principles of LD

Reliable
- single source of truth (code, tests, runtime...)
- reconciliation mechanism (tests, validations)

Low-Effort
- Simplicity (nothing to declare)
- no documentation (avoiding the need for documentation: standard etc)
- perennial knowledge (stuff that does not change)
- refactoring-proof knowledge (stuff that automatically changes)
- intrinsic knowledge + collocated (stuff that to together)


Collaborative
- conversations over documentation
- knowledge decantation
- accessible knowledge (make accessible to all audiences)
- collective ownership (developers don't own the documentation, they just own the technical responsibility)

Insightful
- deliberate design (do I know what I'm doing? + tooling can help change behaviors)
- embedded learning
- emotional feedback (feedback with a sense of good or bad)

--
@tottinge: Product category: "Document Graveyard" -- are all document management & wiki & sharepoint & team spaces doomed?



--
No dependency injection: help trace how classes are constructed, which is harder when using a DI framework

-- QA after my talk at Sgcib
Documentation of the data schema to communicate with the outside?
- Json API
- DB as integration medium
--
Groovy Spock test framework extracts the expression from the code in its failing tests reports
--


--
@jeffsussna: @lunivore @tastapod What's the best way you've found to document/manage/share the results of BDD conversations?

@lunivore: @jeffsussna Manage with conversations, document with actual working code. Prefer a wiki to Cucumber etc. these days. @tastapod

@tastapod: @jeffsussna @lunivore I like having a product and/or team blog. Journalling decisions and conversations as you have them documents history.

@tastapod: @jeffsussna @lunivore It also shows how decisions got made, and lets you see changing tastes or learnings over time.
--
Living Glossary:

See semantic call by meaning
--
Living Enterprise Architecture Modeling (Cartography)
See email

Concepts fed from project source code, plus metal model in code to define the relations, and engines to display, enforce or measure the actual portfolio vs the target vision (alignment, dependencies, consistency, naming, technology choices...)

Eg: no Tibco RV for reliable messaging (STP trades), no EMS for market data; one single golden source by conceptual object...

--

--

--
## Humane Registry
Martin Fowler

Wiki with contributions from both devs and users + auto-fed information from source control, usage tracking...
--
## Static Typing and use of Design Patterns


--
@semanticwill: "Shared documents are not shared understanding.” - @jeffpatton
--


--
How to?

Name after it's used: tests, classes etc

--
A claim of this book: documentation is easy when you clearly know what you're doing:

Red - Green - Refactor and explain

This includes knowing how it's called in the classic books.

Explaining Bounded Contexts: Collaborative Construction, Actual vs Target, Diverging Stakes...

Explaining Command vs Query, side-effect or not, total function or not, intent / problem vs solution, published model vs working model...

Business Rules
--
Visu algo
http://www.comp.nus.edu.sg/~stevenha/visualization/index.html
--
LD - open space Agile France

Retours d'expérience et témoignages (faits ou même imaginables) pour :

living documentation reliable at all times:
- extracted from code
- reconciliation against the code
- self-documenting code, beyond clean code
- Any other idea for realtime update and always in in sync documentation
--
Internal Documentation (built-in the language, IDE support) vs External Documentation (separate and using non-programming formats)

Task-Oriented, Audience-Specific

Principles:
- Several birds with one stone:m
- Focus on the stable parts, let the machine take care of the rest
--
In this book we will focus on documentation for complex projects, projects where you're learning while doing, what Dan North calls Deliberate Discovery.
--

--
@NickHodges: Excellent advice from @ploeh :  Always write robust, complete, and explicit exception messages.  It can actually become documentation.
--

@cyriux: @FutureAaron @abdullin a living diagram is a diagram that you can generate on every change, so that it is always up-to-date.


--

--

--




--
@michaelbolton: @JariLaakso I observe the author—like many in our craft—seems to believe strategies and contracts are documents. Reification error. 1/2

@JariLaakso: @michaelbolton Highlighting X doesn't mean replacing Y. This is where some agilists go wrong. You make a good point.
--
@tottinge: Code is documentation. Period. Bad, clumsy, ugly code is just really lousy documentation.
--

--
Dexy: like make but for documents
- Place prose in the code
- Place code in the prose
- Code is code, prose is prose, with tools to mix them together, plus data!

Code, prose and data cost money. On the other hand, analysis, documentation and reporting have value
--

--
Literate programming with version control http://www.youtube.com/watch?v=T1ZEDElR7sA

- Version of the tutorial step vs version of the creation of the tutorial (using branches?)

- Layout file (literate) with instructions to include lines, files, collections of commits
- you don't want to show the diffs but you wanna show what's replacing

- literate programming is not a way to do documentation but a way to write programs
--
@FriendlyTester: "Having conversations,Is more important then documenting conversations,Is more important then automating conversations" @lunivore #bdd
--

--

--
Dire la destination plutôt que le chemin
--
On ne répète pas une norme, on la cite. (En prime on se couvre)
--
Joe Armstrong

Programming is the act of turning an inexact description of something (the specification) into an exact description of the thing (the program)

A program is the most precise description of the problem that we have
--
Thread macro clojure |> to document visually
--

--
Leanpub is itself a form of LD: chapters and subset .txt to do the curation

Content Curation
Social citation (à la Pinterest)
--

Clean thinking
--
Notes for self: repetition

--
@cyriux: Lots of project management posters on the walls these days, but no big picture of the system: is it too obvious? No one cares?

Makes it hard to reason about impacts, tasks, testing and help newcomers quickly understand what others are talking about.
--
Notifications inter-teams of SOA collaborative modifications of UML diagrams : see IBM rational
--
@danielwertheim: "GO" as a name for a language, from a company who is into web searches, isn't that name kind of...."unfortunate". Not so search friendly.
--

--

Pinterest-like: pin stuff of interest by topic on a board. That's curation by links.
--
Mining et search on emails, notes and posts with attachements...
--
Map Vs territoire : on tente d'organiser les infos sur une mind-map et on découvre au passage des corrections à faire dans le code...
--
Jour férié : on passe son temps à expliquer au business !

--
--


#insightful
Auto-diagramme : alternative pour exploiter les forces visuelles, eg trouver un chemin entre À et B etc ; aussi c'est jetable et perso !
--
Just because it is documented, it doesn't make it less stupid.
--

Title:

# Living Documentation
Reliable documentation for free with Domain-Driven Design
--

--
Uncle Bob  http://butunclebob.com/ArticleS.UncleBob.TheThreeRulesOfTdd

Micro tests as design documentation...
--

Interfaces + chosen implem
MongoDBAccount -> Account

The implementation name prefix is a documentation
--
<funny block>
Meanwhile in another universe...

Literate programming
Intentional programming
MDA
Formal proof
Natural Language Expert systems
...
--
"Make documentation, without spending time outside of making software at the same time"

--
- Audience -> curation
Complete the code, or challenge the - code
--

@Morendil: I had to check the date, but it's not April 1st. Somebody wrote "comprehensive documentation over tribal knowledge" in earnest.
--

--
Improve stuff by making it more visible: make quality visible, make design visible, make specs tree and goals visible, make dependencies visible, some metrics, build walls...
--
Anecdote de Claude Falguière
Specs écrites, mais incompréhensibles. Les devs suggèrent de faire des revues des specs, les analystes décident de faire d'abord des revues entre eux. La semaine suivante, au reporting : "les revues on les a pas faites, car on n'arrive pas à relire et comprendre les specs" lol
--
@chrisparnin: Proof-of-concept, "TODO By", throws exceptions if TODO comment is not done by due date. https://t.co/QhLmX0du02

@tvdstorm: .@chrisparnin Great idea. All comments should be executable. IOW there should be no comments.

--
