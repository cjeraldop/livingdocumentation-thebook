LD - Journal 2


--
Raw artifact are not ready to be useful documentation; to be useful we need the curation to carefully select the few tests that are worth having a look at.

--
### Example 1: Given-When-Then Test

One way to structure this DSL is to follow the Given-When-Then template.

A> See Github code from Fabien. and todo: use specific runner for test scenario reporting

???
--
## BDD: Expose properties too!
---


--
# Throw-Away diagrams

The diagram you need is never part of the documentation: assessment is documentation in-demand

Have a question? Quickly write a script to answer it, or use a tool like Moose, codecase or ndepend. Explore the hotspots in your source control.

--
## Domain Immersion / Investigation Wall

Visit the real-world business, take photos. Write an account of the visit and add it with the photos and sketches to the documentation, in the "overall context" part. Interviews of business people may also complement this overview that must be as concrete and vulgarized as possible, without ignoring the key business drivers. (From DDD immersion course)

You may also list competitors and some critical reviews.

Still, separate between what's stable and rather timeless (business fundamentals) and the current challenges (competition shifts, new regulations, tech breakthrough, strategy change...)

--
Using Image map? Think about its maintenance!

--
Code as documentation

Documents the units of variables and every assumption underneath each number: (by decreasing preference) as type, as whole object, in variable naming, or as free comment.
--
# Introduction : Knowledge Transfer

Everybody has a mental model, the difficulty is sharing and validating it @mathiasverraes #DDDEU
--
# Tools-based documentation


--
# Ready-made documentation

From https://t.co/enPfZAYM4O?ssr=true on metaphors we live by

> We could program a computer to command other computers to perform tasks respecting their arrival order. This description is already hard to understand. On the other hand we could describe the solution by talking of a Queue Server that assigns Jobs to Workers based on a First Come First Servedqueue discipline. Queues are a familiar concept from our daily lives, we see them at the supermarket or the bank. We wait in them at airports or train stations. We understand how they work, so for someone reading our code it might be easier to talk about queues, workers and jobs, than to go all over the verbosity required to explain this setting without using the Queue metaphor. We see that by choosing the right metaphor our program reaches a level of abstraction that requires the least effort for someone foreign to the problem to understand our solution. Also by solving our problem with queues, we get a whole mathematical theory for free.
--
# Embedded Documentation

Good documentation is documentation that you use day to day and improve when you see something missing/incorrect/awkward.

Gregory Brown @practicingdev

--
# Code as Documentation

> In Ward Cunningham’s original formulation, Technical Debt was the accumulated **distance between your understanding of the domain and the understanding that the system reflects** (emphasis is mine).

Code should reflect your understanding of the domain.

(? Weak example?)
Imagine that a credit application initially has one single borrower. You model it that way in the code. Then after some time you notice that there may be a second borrower, so you add a second one in the code. Then you discover that you may even need 3 borrowers in some cases. Actually you are realizing that there may be any number of borrowers, but out of short term laziness you just add one more borrower. Now you have 3 fields, 2 of them which may be empty (using optional if you're lucky, null values If you're not), with validation & scoring logic applied 3 times. Now you understanding is that there may be any number of borrowers, but the code only claims there can be 3, with only one mandatory out of them. This is a problem for evolution, and


## Towards Machine Learning assured software design?

---

# Naming in academia

See Felienne and @Peterhilton post on that

# Preserving  Intent in the code

.@DragonBe In fact, my argument is that by _not_ adding this layer, you are _creating_ incidental complexity, technical debt. The original meaning (in the first example) is lost, and can’t be reliably reverse engineered from the code. - @mathiasverraes


--
https://michaelfeathers.silvrback.com/characterization-testing

"The purpose of characterization testing is to document your system's actual behavior"
--
When to document? JIT whenever we find out we were missing an important bit of information

--

--
I am tired of documentation that just states the obvious. :-(

@ewolff

<great thread>
--
Augmented Code

I completely don't buy into "code is self documenting". Code needs docs  to explain the why; code by itself  is only how.
-- @hlship

@hlship so what you are really saying is "I don't know how to document the 'why' in code"
-- @ipreuss

@hlship @missingfaktor you're doing it wrong then. it can and should do both. intent should be explicit. it's just easier to write that way.
-- @monkeyonahill

@hlship @viktorklang I never thought of "self-documented" to mean "sole documentation"
-- @tobyjoe

@hlship I agree. As a parallel example we don't navigate purely by lists of directions, we have maps to understand the wider context.
-- @kriscoverdale

Supporting documentation may include readable tests, inline comments, and external docs. You will be judged on the latter, regardless.

Source code should be a conversation between the author and the reader that provides a complete picture of that context.

Make it work. Make it right. Make it fast. Make it understandable. Few make it to the 3rd step, never mind the 4th.
-- @hlship


--
Document actual usage, not speculative usage

Some say "document after" the stuff that's actually done. Note that it doesn't necessarily oppose to documentation-driven. You may start by documenting what you expect, as long as you make sure it accurately reflect the actual usage. This is hard to do unless you rely on enforced mechanisms, like tests in TDD.

--
The header of Gherkin files is one of the most underrated locations for documenting *why* some behavior is there #soThat
@Giorgiosironi
--


--
3 hours custom 1-to-1 one LD with Stephane K. at Arolla

--

--
"Guided Tour: more of a proposal." The ranking thing is not ready. Rank with Basic-ish numbers: 10, 20, 30 so you have room to insert additional steps without renin wrong every step.

Or an ordered enum used to describe each step.

—
# Documention strategy / documentation landscape

# Add tags the way you would look for it - task-oriented indexing?

Meta annotation to find everything documentation everywhere without any entry point. Full-text search for the string "documentation" in the core base and find out everything of interest.
--
Package-info.java // remind everyone that it exists, plus annotations at module granularity, eg Immutable, Deep-Linking


--


--


--
# Wiki

--
# Configuration / Dependencies

Whoever started the trend to do configuration in json obviously did not see any value in commenting ...
@jbandi
--


# Domain  Language & Knowledge Ubiquitous Language

Great advice from @SoCraTes_UK to know if your code is align with your domain: Put your git log in a cloud word #socratesuk

--
# Stable Knowledge

# Organizing Knowledge
Domain partitioning has the benefit of being rather stable over time
--
# Code as documentation / Enforced Guidelines

--
# Deliberate Decisions / rigorous thinking

If(1) // bad
Now we need to be rigorous using strict types
If(Boolean)
--
# BDD and its other flavors

Sorely tempted to bypass popular ATDD/BDD tools and explain how to write one instead. xUnit + text file with tagged data + simple parser

Serenity

@jasongorman one can avoid the parsing by using approval testing + templates to generate docs

Also: domain-specific notations embedded into the test reports? Thx @aloyer
--

--
# A vision

Todo: add a chapter "pure opinion" on how I see documentation. What u want, don't want. How I see things in my dreams. Something I spring forever.
--
# Architecture Documentation


---
