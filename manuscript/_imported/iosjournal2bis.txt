“If your model is telling a story, the Modules are chapters.” - @ericevans0

“Modules are a communication mechanism. Group classes in a Module to tell the next developer to think about them together.” - @ericevans0
--
# Throw away Diagrams

Graphs are like white board diagrams: they communicate to the people who created them. Anyone else who walks up
sees squiggly lines.

Jessica Kerr - Twitter
--
# Commits

Commit messages as tiny Architecture Decision Records

@jessitron Pull Requests as slightly larger Architectural Decision Records.

@ph1 @jessitron but who goes reading them? If PRs are Commands and commits Events, we need projections --@giorgio sironi
--
> And code is not the Grail, value is the Grail, so artifacts that add or shore up value (like architecture models and descriptive and prescriptive architecture documents, etc.) are peer considerations to code when it comes to weighing how to invest time/budget/attention/talent. Remember, when we think in value terms, time invested in enabling many people to be more productive (create more value with less resources), can be economically justified!

From Ruth Malan

--
We get so down in the channel of automated visualizations (yes, even I) that we overlook the role of the architect and engineer developing a mental model of the built system, and drawing out that mental model to explain the system. Then, what do we draw? Anything from blobs and boxes to UML diagrams. And I highly value blobs and clouds and boxes and other sketchy ephemeralia! So long as we don't pretend/expect that to be the system specification!
--
# Obstacles to honest documentation  / failures / impediments

# Solution Envy: a desired solution later "rationalized" into a convincing-enough business case. (See also Resume-Driven Development and Guru-Driven Developmen)

From Ruth Malan Traces:
The flow of energy through a system tends to organize that system" -- (ascribed to) Buckminster Fuller (source??)

"Dana observed, watching Man on Wire, that when intense passion and energy is poured into something, the very universe seems to organize around it!"

My own experience shows this too. The design as it is was not that rationale indeed. Instead, it was shaped by the team willing to use a new technology (Spring, Hibermate and JSF back then), then willing to try a new style (CQRS / event sourcing with frameworks). It started with Solution Envy, later rationalized to make a convincing case. The team, and the management equally, wanted Netflix-like scalability real bad, because it sounds good, not because it was necessary. Again the rationale comes after.

We should document that as it is, for the sake of honesty. But who would admit that so crudely in a documentation?
--
Surprise is one of the most expensive things you can put into a software architecture. Adam Thornhill
--
#Documentation is a love letter you write to your future self—Damian Conway (from
--
http://bit.ly/1RdDez2
--
# Beyond Documentation

Documentation-Driven Development: explaining in prose how your system can be used will force you to notice inconsistencies to resolve
--
When should we create a document on an #agile team? disciplinedagiledelivery.com/agile-document…
--
BDD tooling for design too?


--
# Commit guidelines

Write commit messages so that the commit log can be understood by your Product Owner

Write commit messages describing the "why" -- because the "what" can be read in the diff

Write commit messages so that they complete the sentence "This commit will..."
--
Li Engie: would like having:
- Ubiquitous Language glossary -> manual markdown file
- Explanations of products -> in their own feature files, along with their specific behavior
- How to deal with that in the legacy UI -> separate user manual in the wiki, with loose links, ideally as a search


--
# BDD

Pickles now supports Markdown descriptions. Useful for formulas, simple ascii diagrams (eg timelines), and for organizing the description by sections and bullets. It also enables embedding images and links to external resources.

Link to direct page
Link to a search
Link to a search through an URL registry / shortener
--
ADR tool by Nat Pryce following Michael Nygardt post

ADR should be referenced in the artifacts which follow them as rationales.

ADR supersedes each other regularly, are marked obsolete. Move them to attic/ or pending-deprecation/
--
Add a section on language meta models: AST of IDE, meta model with or without Javadoc... It's not that hard! Don't cry or run away!

--

--
Parameterized tests -> not win all inputs and outputs? There must be something common across each sample in a method (error, nominal, etc.)
--
@springrod: Good error messages are like good documentation in code: A one-time investment by one person that can make many others more productive.
--
@r7krecon: Stigmergy. #conwayslaw https://t.co/yXkEFHLpDj


--
# Embedded Learning

@opencontent: Properly conceived, educational materials are clues we leave behind for others to follow in their search for understanding.
--
@mbostock: It’s funny how writing documentation can spur redesign: it’s easier to simplify a complex API than try to document it completely.
--
Documenting dependencies: constructor arguments
--
@claussni: @simonbrown Architecture diagrams should show me things I can't read from the code - because it's too big or it's about runtime behavior.
--
# Unorthodox media

@jasongorman: The motivational poster I would hang in every dev office would say: "Another technology is almost certainly not the answer"
--


Thx Nicolas Fedou while back from the skii resort

Runtime documentation: generated infrastructure diagrams
--
Generic notation vs specific notation
--
Carte grise vs serial number : external vs internal documentation
--
C4 Consul config -> container diagram
--
maven license plugin
--
Quoi, pourquoi : knowledge augmentation
Comment : knowledge exploitation

Internal documentation : the more urgent, the more you need internal, not external documentation.

Polkution? Like trekking paths on the mountains
--
Spreadsheet Driven code



Product segment, category x tax, fee, discount, sell at a loss

(Yes, No, NA, %)

Config in a human-readable format directly driving the code doing the processing. Eg from cloud spreadsheet, or using Apache POI.
--
Code layout Tetris: https://github.com/jcollard/elmtris
--
@KentBeck: comments are echoes along the timeline from future refactorings, pleading to be born
--
@gvwilson: Lazy competence quotient (LCQ): %age of comments in code that include links to Q&A on Stack Overflow.
--
https://t.co/pgPLTVBcp1 on documentation of ET testing sessions + Da Vinci
--
"Faire parler de façon spontanée"
--
Decision Table (and similar Fowler DSL patterns

--
Document the impacts? That's easy! There is a 50% likelihood that a change here will break there :)
--
--
Beyond: document your achievements on the wall on order to be more happy!

--
Runtime documentation anti-pattern:  logger at each entry and exit of methods
--

@fchabanois: pour garder une trace et prévoir ses expériences sur le produit (et les succès + failures) https://t.co/y6ir9TeW5m #startup #hypotheses
--
Illustration miroir de blanche neige (beyond documentation )
--
@dtanzer: I'm unit testing at a very low detail to document my code and my thoughts when I wrote it. @simonbrown #GeeCON

--
Some lost content here to retrieve from cyrillemartraire@gmail.com / note

Beyond archi template as a checklists: a feedback mechanism to improve your thinking and to think earlier about aspects of a system or project that you forgot or neglected so far.

--
Rules are for machines to automate or enforce, and judgement is for humans
--

http://t.co/IT1qFASkg4
--

--
Todo curation for living diagrams: where to stop navigation on the metamodel?
--
--
Curation code

Is this noise? Just like trekking signs in the forest, mountain in the best places in the world...
--
Anecdote Loustic

Papiers print Hermes 1950
Label Toilettes
"On fait tout pour réduire le nombre de questions" for the staff
--

--
--
Living Glossary -> add hierarchy of all subtypes for an entry
--



More factoring
Symmetries
Recursive
Consistency
Replaceability

As such the mere quantity of specific knowledge to document is an indicator of the maturity of the design.
--

--
Auto generated quizzes out of the documentation, eg BDD
--
Puppet: modular dependencies document an important part of the WHY
--
Small-scale simulation

Take the core 12 classes out of the 500 of the project, and assemble them in less a day into a simpler system you can do a complete walk-trough of in less than an hour. // Abstract Core

Also useful for some kinda of testing, like testing the rounding throughout the chain, regardless of the concurrency model.
--

--

--
Organic growth as natural documentation

Small is easy to understand, hence at the beginning of the project the code itself is a naive form of documentation.

We can keep a version of it for the sake of documentation for when the code has grown much larger (see Small-Scale Simulation)

When the code grows, evolve the small-scale or not? Preferred option is a small-scale system built from the very elements of the actual system, in which case it evolves just like your tests evolve with the code. If it does not evolve well, perhaps your design has a problem. Otherwise the small-scale doesn't have to evolve for most changes, unless changes go as far as even reconsidering the purpose or the fundamental work process of the full system. On a typical project, as the project matures changes turn over time from radical changes impacting the overall structure to increasingly local enhancements.
--
Tests as documentation, how-to
--
@sarahmei: Pair programming: the best way to do less email, attend fewer meetings, AND write less documentation! https://t.co/qzhzfM6OTz
--
Type-driven -> Optional()
--
Templated Diagram
--
Single Sourcing
--


Factual Argument: Living Documentation to convince
--
Questions for each case:
- what problem am I trying to solve?
- what's the solution?
- how do I do that in practice?
- tips & pitfalls -> other patterns / advices
- related ideas
- examples, code samples
--
Go to meetings with a folder of screenshots and diagrams and reference documents for in-session concrete data
--
Todo: identify principles that are / have to be always true


--
Insights / feedback

Having someone coming into your team from another team brings in new ideas and answering their questions can trigger existing team members to reconsider design decisions.

http://t.co/g33BYV4dtv

--
Transparent Architecture -> decentralize architecture and decision making

What business area and function (features?) does an application implement? Declare that explicitly, if possible in the source code itself.

Golden source for each aggregate: what application / schema is the one source of truth / master data for a given concept? Glossary of golden sources. Sometimes it's mixed between applications and depending on the status of the things...

SLA: by application? By business area / function? As tests? By Bounded Context? Make the. Explicit somewhere anyway.

Codex of principles. Company-wide guidelines, if any. Business strategy (automate more! Stp ratio++! Customer convenience first!), architectural strategy (decommission VB6 or J2EE, web-first). How and where to materialize that? As an Evergreen document, plus saved searches, saved monitoring configs... As a bunch info Json files with links? In a wiki, with pictures? As a slide deck for humans? Plus tools to scan the code base and report data. ASCIIdoc?

--


--


--


Link to the reference.
--
https://mobile.twitter.com/mariofusco/status/587873251348582400

--

Collaborative
Single source of truth = excel
--
Scaffolding tips



--

No documentation

Type-driven documentation

Type providers in F#

—

Less silos, less work handover, less need for documentation
-> whole team FTW


--
Docker documentation is key!

"Success of products depends a lot on the quality of the documentation." Jerome Petazzoni, Docker

Don't do something twice: once I have to answer the same question twice, I start the documentation about it. Docker file is the golden source. (?)
