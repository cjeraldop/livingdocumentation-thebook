# Ready-made knowledge & face to face conversation to speed up knowledge transfer

- Hello JB, so how's your startup going? Oh quite well, Jam Shake is going to round A financing now. So we're ready to grow a lot for the next year! - oh great! What does it do?

- (some startup pitch: it's like XXX but for YYY)

- On the technical side, how's your system organized in a nutshell?

- I know you're familiar with Software Craftsmanship and design, and DDD in particular, so you won't be surprised to hear our system is made of several sub-systems, one by Bounded Context indeed.

- Oh yes, makes perfect sense! Each one is a microservice then?

- Yes and no. They begin as modules very strictly decoupled in terms of dependencies, i.e. ready to be extracted into their own process at runtime. But we keep them within the same process until we really need the separate processes, usually to scale with the increasing load.

- Yes! I call that the "microservice-ready" style of code. You don't have to pay the full cost of too many physical services upfront, as long as you have the option to do it at anytime. But it takes discipline.

- yes and that's easy when you're just 1 or 2 developers like we are at the moment. In practice we regularly use these options because of the increasing load.

- Increasing load: that's good problems to have when you're a startup growing and looking for financing!

- yes absolutely.
- I'm curious to have an overview of the full system. Perhaps Bounded Context by Bounded Context?

- sure. There are around 7 Bounded Contexts at the moment: Acquisition (registration of new users), Arrangement, Audio Rendering (mixing, limiter and compression kinds of processing), Stems Management, and Reporting. They all rely on Spring Boot instances on top of separate Postgres databases, except the Stems management built with Node.js on top of an S3 storage. Each Bounded Context is paying attention to their domain model, except Registration that CRUD-y based on Hibernate. It's a survivor from the early version of the system!

- Alright, I see. Thanks JB!
