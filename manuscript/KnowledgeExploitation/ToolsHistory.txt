# Tools History

As we've seen before, a lot of knowledge is already there, and some of it is hidden in the history of the tools you already use. Source control systems are an obvious example. They know about every commit, when they were done, by who, what were the changes, and remember each commit comment. Other tools like Jira or even your email also know a lot about your project.

However this knowledge is not always readily accessible, and is not used as much as it could. For example if there's no screen to conveniently retrieve the the most commonly asked question on the chat, you may never know it.

Sometime you have to re-enter the same knowledge in another form in another tool. For example a commit to fix a bug with a comment that states it fixed the bug, however in many companies you have to also go to the work tracker to declare you've fixed the bug. You also have to declare the time spent on the task, only to enter it again into the time tracking tool later in a aggregates form. This is a waste of time. Consider integrating the tools together.

Note that better integration between tools also helps simplify the human tasks which reduces the need for manual documentation of the tasks. However when the integration fails, then you do need documentation. Ideally the integration component should provide this documentation. For example an integration script should be readable and as declarative as possible.

**Therefore, exploit the knowledge stored in the tools. Decide what tool is the unique authority for each bit of knowledge. Search for plugins that can provide integration with other tools, or specific reports for your documentation purposes. Learn how to use the command-line interface of your tools to use them programmatically to extract knowledge or integrate them with other tools. Discover the API's provided by the tools, including the email or chat integration.**

As a last resort, find out how to query their internal database, but beware that it may change at any time without prior notice as it's usually not part of the official API.

Some examples of tools and their knowledge:

- Source control (e.g. Git with the blame command): who changed what, when, **commit comments and Pull Requests discussions**
- Internal Chat system (Slack etc.): questions, launch build, release, mentions of words, activity, moods, who, when
- User Directory: **mailing lists**: teams, team members, team managers, i.e. who to contact for support, who to contact for escalation...
- Console history: most recently or commonly used commands or sequences of commands
- **Services registry**: the list of **every running service**, their address, plus any **additional tags**
- Configuration server: environment configuration details...
- Company Service Catalog: services governance information: who to contact, time last updated...
- Project registry, even as a spreadsheet file on a shared drive: project names, codes, leader, sponsor identification, budget code...
- Sonar components, their grouping into logical units, metrics and their trends, at various levels of details, all this across multiple repositories and multiple technologies
- Tracker history, release manager history: who, when, current versions, what changes in each version...
- Email server, to archive for auditing (e.g. by forwarding to the archiving address): manual reports, manual decisions like go-live decisions, most knowledgeable collaborators (implicitly)
