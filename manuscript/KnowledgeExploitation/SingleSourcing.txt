# Single Sourcing with a Publishing Mechanism (aka Single Source Publishing)

When the authoritative source of knowledge is source code in a programming language or a configuration file of a tool in a formal syntax, it's often necessary to make this knowledge accessible to audiences that can't read it. The standard way to do that is to provide a document in a format everyone understand, like plain English in a PDF document, or as a MS Office document, spreadsheet or slidedeck. However if you directly create such a document and include all the relevant knowledge in a copy-pasted fashion, you will have a bad time when it changes. And on an active and healthy project, you should expect it will change a lot.

Pragmatic Programmers make it clear in their Tip 68 that "DRY also for documentation." As an example of duplication they mention that a DB schema in a specification document is redundant with the DB schema file in a formal language like SQL. One has to be produced out of the other. For example, the specification document, that's really useful as a documentation indeed, could be produced by a tool that can convert the SQL or DDL file into a plain text and diagram form.

![From authoritative knowledge to published documents](images/single_sourcing_mechanism.jpg)

**Therefore: Keep each piece of knowledge in exactly one place, where it's authoritative. When it must be made available to audiences who can't access it directly, publish a document out of this single source of knowledge. Don't include the elements of knowledge into the document to be published by copy-pasting, but use automated mechanisms to automatically create a published document straight from the single authoritative source of knowledge.**

## Some examples of producing a published document

There are many tools available to produce documents out of source code and other technical artifacts. Here are some examples:

- Github takes the README.md file, that is a single source of knowledge about the goals of an overall project, and turns it into a web page rendered to be pretty

- Javadoc extracts the structure and all the public or private API of the code and publishes as a website as a reference documentation. You can easily create a custom tool based on the standard Javadoc Doclet in order to generate your own specific report, glossary or diagram, as described later in the book.

- Tools like Maven have a built-in way (e.g. 'maven site') to produce a consistent documentation, usually as a website, by putting together a number of tool reports and rendered artifacts. For example it collects test reports, static analysis tools reports, Javadoc output folders, and any markdown documents to organize all that into a standard website. Every markdown document can be rendered in the process.

- Leanpub, the publishing platform I use to write this book, is a canonical example of a single sourcing with a publication mechanism: every chapter is written as a separate markdown file, images are kept outside, the code can be in its own source files, and even the table of content is in its own file. In other words, the content is stored in the way it's most convenient to work with. Whenever I ask for a preview, Leanpub's publishing toolchain collate all files according to the table of content, renders it through various tools for markdown rendering, typesetting and code highlighting in order to produce a good quality book.


In its simplest form, you can follow this pattern with any templating mechanism and a bit of custom code. For example you could produce a PDF out of the resource file that lists every currency supported by the program.

## Published Snapshot with a version number

Any document published from a single source of trust is a snapshot: it must  therefore be considered as strictly immutable and should never be edited. To avoid the risk of having someone edit a published document, favor documents formats that prevent edition, or at least that make it not too easy. For example, prefer PDF over MS Office documents, that are too easy to change. Whatever the format, consider using the locking flags to prevent edits. It's not about making it impossible to edit by a hacker, but just to make it just hard enough so that it becomes easier to change the authoritative source and have it published again.

Any published document must clearly identify its version, and should also include a link to the location where the latest version can be found.

%% TODO Picture: versioning section with barcode and link to latest

If you produce a lot of paper documents to be printed, you may consider putting on each of them a barcode with the link to the folder that always has the latest version. This way, even a printed document can easily direct the readers to the latest version.


## Remarks

Only write by hand which that could not be extracted from an already existing project artifact, and store it in its own file that has its own lifecycle. Ideally it will change much less frequently than the knowledge to extract from other places. On the other way round, if some information is missing for the document to publish, by all means try to add it into the artifact it is most related with, perhaps using annotations, tags or naming convention, or make it a new collaborative artifact on its own.
