D> ## Gut feeling and spontaneity
D>
D>Since when knowing something consciously should be considered less desirable than just gut-feeling?
D>
D> This is however one of the various kinds of criticisms about patterns out there, and this one is clearly explained in an interesting post from Steve:

D>    *The use of patterns is like the use of literary device.  There are (probably) an infinite number of ways in which the same general thought can be expressed, but I doubt you will find a single quality writer who started off a chapter thinking, "I'm introducing a character here so it's best to paint a picture of the character.  That calls for simile.  Yeah, simile will do it.  I think I'll also use some ironic juxtaposition.”  This type of writing feels forced. I've read code where the application of design patterns also felt forced.*
D>
D> Steve has a point here. I must admit that gut feeling, if trained properly on examples of good quality, may have advantages over a conscious quest for perfection, perhaps because our brain is more powerful that we can ever be conscious of. And yes, very often, we pretend that what we did was intentional and deliberate whereas we're just explaining a posteriori a decision that was actually based on gut feeling.
D>
D> Then Francois from the ORM *Propel* raised the topic: should developers know design-patterns? He discusses in a blog post the reasons to mention or not the various patterns used at the heart of the Propel ORM in the documentation of the engine.
D>
D> ORM engines are rather sophisticated pieces of software, and they make big (and deliberate) use of patterns, in particular the Fowler PoEAA patterns:
D>
D>    *Propel, like other ORMs, implements a lot of common Design Patterns. Active Record, Unit Of Work, Identity Map, Lazy Load, Foreign Key Mapping, Concrete Table Inheritance, Query Object, to name a few, all appear in Propel. The very idea of an Object-Relational Mapping is indeed a Design Pattern itself.*
D>
D> If you know the patterns, you can understand Propel quickly; if you don't, then  you'll need to go through much more explanations to reach the same level of expertise. And next time you'll encounter another ORM you'll have to redo this discovery effort. Of course at some point you'll recognize the patterns, and you just won't know their names. You'd just be half-conscious of the patterns.
D>
