# Plain-Text Diagram

Most diagrams are short-lived. They are useful for a particular discussion, to help reason on a specific design decision, but once the idea has been communicated, or once the decision has been taken, they immediately lose most of their interest. That's why **Napkin Sketches** are the default way to go about diagrams. I use the word *napkin sketches* to actually refer to any kind of low-tech visual and tangible techniques, it could be *Whiteboarding*, *CRC Cards* or *Event Storming*. They're all great tools to communicate, reason and try things in a visual fashion.

However it does happen that some diagrams remain of interest for the longer term, in which case you want to persist the initial napkin sketch, set of cards or stickers, or the initial whiteboard into something better suited for the posterity. The first idea is to simply take a picture of the outcome and to store in the wiki, or directly in the source control, co-located with the related artifacts.

This works fine if the picture describes stable knowledge, but if it describes decisions that evolve regularly, then you'll have a misleading picture after a while. You could try to do a **Living Diagram**, but this may too hard or too much work to do compared to the expected benefits.

This is when you need a Plain-Text Diagram.

**Therefore: Take your initial napkin sketch, set of CRC cards and turn it into plain text, and use a text-to-diagram tool to render it into a visual diagram automatically. Then on every change, maintain the plain text description of the diagram, and keep it in source control within the related code base.**

An important idea of a plain text diagram is that we favor the content over the formatting. You want to focus on the content in plain text, and let the tools take care of the formatting, layout and rendering, as much as possible.

## An example

Let's take the example of the fuel card fraud detection algorithm. We started with a napkin sketch when thinking about the problem, listing every related responsibility needed, and how they interoperate to solve the problem:

![The initial napkin sketch](images/napkin_sketch.png)

After a few days we agree we need to keep as part of our documentation, and we need to make it more easy to read, and to maintain as we expect it to change from time to time.

So basically we look at the napkin sketch and literally describe it using sentences:

~~~~~~~~
FueldCardTransaction received into FuelCardMonitoring
FuelCardMonitoring queries Geocoding
FuelCardMonitoring queries GPSTracking
Geocoding converts address into AddressCoordinates
GPSTracking provides VehicleCoordinates
VehicleCoordinates  between GeoDistance
AddressCoordinates  between GeoDistance
GeoDistance compared to DistanceThreshold
DistanceThreshold delivers AnomalyReport
~~~~~~~~

Then we can use a tool like Diagrammr (http://www.diagrammr.com apparently no longer working at the time of editing this chapter) it's easy to turn this set of sentences into a nice diagram.

The default layout of the rendered diagram is an Activity-like diagram:

![The diagram rendered from the text](images/diagrammr1.png)

But the same text sentences can also be rendered as a Sequence diagram instead:

![Another layout to tell the same story in a different way](images/diagrammr2.png)

A tool like that is in fact only a wrapper on top of an automatic layout tool like Graphviz. Each sentence describes a relationship between two nodes. The first word of the sentence represents the start node, while the last word of the sentence represents the target node. This is really rustic an approach.

It's not difficult to create your own flavor of this approach, using perhaps different conventions to interpret the text sentences. However the point is to keep it really rustic. If you don't pay attention to the simplicity of the syntax, you may end up with a syntax so complicated you have to look at its syntax sheet sheet all the time, which would defeat the purpose of simplicity.

When there are changes that require to update the diagram, it's easy to make them in the text. Renaming can be done with a find-and-replace. Perhaps your IDE can even have its refactoring automation reach the plain-text files, in which case you're less at risk of forgetting to update the diagram.
