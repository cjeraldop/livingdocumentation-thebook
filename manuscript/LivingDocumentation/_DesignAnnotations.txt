## Curation of domain models modules

//typically on a class or interface. Note how the name of the annotations try to avoid any technical jargon in favor of words that are accessible to non-technical audience, because in a domain model we want

@Policy @BusinessRule @BusinessConcept
@Core
@KeyConcept
@BusinessConvention
@ConsistencyAggregate
@BusinessDomain(BusinessDomain.ACCOUNTING) //on a package


## Curation of design

@Command
@Query
@SideEffect(SideEffect.WRITE, "Database‚Äù)
@Internal //typically on a package

## Curation of source code snippets

@Tutorial("How To Setup a Datasource")
Public void How_To_setup_a_Datasource(){
  Context ctx = new Context("my-key", "with-some-value");
  Datasource.init(ctx); //etc.
}

@Tutorial(DocLandscape.GETTING_STARTED)
Public void step3(){
  //...
}

// when the same bit of code is generic and can be reused for several different types of documentation, prefer tags that don't assume where is will be used. Instead, just tag with what it is, independently from all its possible uses:


@Snippet()
Public void Configuring_the_number_of_bank_holidays(){
  //... only the content is extracted
}


@Snippet("Creating the method to provide the number of bank holidays")

@BusinessRule
Public int bankHolidays(BusinessCalendar calendar){
  //... the full method is extracted, including its complete signature, comments and annotations, except the @Snippet annotation
}


// one can also simply use special comments, but this requires a full parser
Int price = 12;
Int quantity = 100;
Boolean way = BUY;
// @Snippet How to send an order to the market
orderRouter.send(new Order(price, quantity, way);
// @ Snippet How to be notified of execution
...



--
Type & typing OR Enforced Annotations

On the callback interface used to subscribe your own handlers

~~~~~~~~
// This hook guarantees at least once delivery
@AtLeastOnceDelivery
void onEvent(Event e);
~~~~~~~~

On each implementation:

~~~~~~~~
// See the corresponding property-based testing to enforce the idempotence property
@Idempotent
void onEvent(Event e){
...}
~~~~~~~~

Typically, mocking the data source should verify that no update is being done when the same arbitrary event is delivered more than once.
