# Design Documentation

*Design is about the all decisions taken. It especially revolves between the things and how they collaborate in a valuable way*



@eoinwoodz at #XP2016: "Design documentation  should be Minimal, Usable, Significant". I'd also add Indexed and Checked. MUSIC.

@eoinwoodz Go ahead! By "indexed" I mean searchable, and "checked" I mean automated tests check for consistency of docs, code, etc

## What is design anyway?

The best answer to this question I know is from Alistair Cockburn:

> If it's your decision to make, then it's 'design'; if it's not, then it is a requirement to you.
> From [Alistair Cockburn](http://alistair.cockburn.us/A+requirement+is+a+relationship+to+a+decision)

In this view, design is everywhere:

- In the features which are selected, cut into smaller pieces, and how they are interpreted for implementation
- In the code, with the classes, methods, fields and other constructs depending on your programming language
- In the relationships between these elements, in the way they are used together or not. In other words, in the empty space between the things.

![Design is between the things and how they collaborate in a valuable way](images/element_of_a_system.png)


---
Non functional requirements and Adr as scenarios in "quality attributes" and "design" chapter

Include Markdown and PlantUML diagrams. Specify the conformty criteria as a test!

How do we know we've done it right? How do we know it's being violated? How do we know it's still the right thing to do?

-> make design properties explicit!

Eg. Event Sourcing: No calling the aggregate method directly from outside the domain model.
CQRS: write model ignores the view models. Write model knows of the API in terms of commands and events.

Eg. Assumption: this decision holds as long as we don't have to touch module A whenever we touch module B (at 10%). Check that against the source control history.

Assumption: The Visitor pattern is best when it's more frequent to add a  new behavior on elements than to add a new element. Check that against the source control history, or just as a max ratio # Visitors / # Elements

One-to-one relationships: for each Command there has to be exactly one matching command handler.

Layers, Hexagonal architecture: no external dependency in the Domain Model.

A refactoring: The single source of truth about the Sales Team is in the Sales Team microservice, and no longer in the Agora application. For example, we can always repair data in Agora after they are randomly corrupted or physically deleted.

A style: To avoid large classes of bugs, the main style in the component domain model is Value-First aka Functional-First: immutable, side-effect free functions (but not necessarily interfaces), and without visible null (with a tolerance of 10% expressed in number of un-conforming classes)

Other examples
- All published service (*/web/**Service) is idempotent.
- No data physically deleted, ever


Quality attribute:

The user must see a completely rendered page after no longer than 500ms after a gesture (even if he page may still be loading additional non visible stuff in the background)

Pen testing: the system shall not be compromised by any of the hacking techniques listed in market-standard pen tools.

Nice to have: include test attachments / by-product (eg generated diagram) in the reporting itself.
--
# Conform to an opinionated documented framework

The code not written needs no documentation. Using an off the shelf framework like Axon that is documented may be a good idea, in particular for teams of limited maturity where the framework will constrain the design to follow some structure. This may sound like a bad thing, and it often is, but it can sometimes be used deliberately.

If you write an app 'without a framework' you end up with an under-specified, undocumented, informal framework. bit.ly/1PMzHIP


---

“If your model is telling a story, the Modules are chapters.” - @ericevans0

“Modules are a communication mechanism. Group classes in a Module to tell the next developer to think about them together.” - @ericevans0


%% TODO
--

> So the advice for on-going documentation runs from these observed problems:
>
> - Only use diagrams that you can keep up to date without noticeable pain
> - Put the diagrams where everyone can easily see them. I like to post them on a wall. Encourage people to edit the wall copy with a pen for simple changes.
> - Pay attention to whether people are using them, if not throw them away.
> -- Martin Fowler in [Is Design Dead?](http://martinfowler.com/articles/designDead.html)

## Documenting errors, or avoiding errors?

An important part of documentation is to describe the error cases. But there's a better way: we could avoid the error cases altogether with better design and better coding practices.

Let's take the example of a function that calculates an inverse. If the divisor is zero then there is no result. This is often a case of error management, but an alternative is to make the function a Total Function.

A total function is a function that works for all possible parameters values. In our case, all it takes to make our function total is to extend the number type with the NotANumber special value. Now the function can just return NotANumber when there's a division by zero, instead of going the error management road.



## Design Rationale
http://www-di.inf.puc-rio.br/~dschwabe/papers/DesignRationale_and_Ontologies.PDF (funny very academic complicated method that no one will ever use for real)


> Designing a software artifact typically involves understanding the problem being addressed, identifying possible solution alternatives, analyzing them, and deciding which solution will be used to construct the final artifact. The final product of this process, the artifacts and its specifications, represent but a fraction of the knowledge employed by designers during the design process. They represent the final solution chosen for the particular design problem, but they do not represent, for instance, the reasons that led the designers to choose that one among the other available alternatives, and why the others were discarded.

Design Rationale, is the reasons behind design decisions.

http://www.developerdotstar.com/mag/articles/reeves_13yearslater.html

> "...auxiliary documentation is as important for a software project as it is for a hardware project."

> The source code may be the master design document, but it is seldom the only one necessary.


> Fundamentally, programming languages are just a design notation themselves. I do not see any point in introducing extra translation steps if they can be avoided.

> There are a couple of problems with my "code as design" approach, which I acknowledge. The first is that even the best programming languages have serious weaknesses as tools for expressing certain aspects of a software design. The information is in the code (if it isn't, then it wasn't software design information) but it is very difficult to get it out in human readable form. These are the "other aspects" of a software design mentioned above. The second problem is similar. There is going to be information from the problem space that went into the software design, but that can not be reconstructed from the software design itself. We want to capture this information in case we need to change the software design later. The typical source code comment is not an adequate mechanism.

> Both of these problems mean that auxiliary documentation is as important to software design as it is to any other engineering discipline, if not more so. We must recognize auxiliary documentation as such, however, and not confuse it with the software design

--
> @nathanmarz: Why do so many engineers think complicated system diagrams are impressive? What's truly impressive are simple solutions to hard problems.
>
> @pavlobaron: @nathanmarz @sbtourist the ultimate rule of thumb: if there is at least one line crossing another in a diagram,the system is too complicated

--
Interfaces + chosen implem
MongoDBAccount -> Account

The implementation name prefix is a documentation

--

> Many different software design notations are potentially useful - as auxiliary documentation (it would be nice to have some tools that help us generate and maintain auxiliary documentation automatically from the actual source code. This would be particularly useful in maintaining a graphical representation of the structural aspects of the design).

http://www.developerdotstar.com/mag/articles/reeves_originalletter.html 1992

Modularity and separation of concerns

> Separation of concerns. Divide your application into distinct features with as little overlap in functionality as possible. The important factor is minimization of interaction points to achieve high cohesion and low coupling. However, separating functionality at the wrong boundaries can result in high coupling and complexity between features even though the contained functionality within a feature does not significantly overlap.

-  Single Responsibility principle. Each component or module should be responsible for only a specific feature or functionality, or aggregation of cohesive functionality.



From http://msdn.microsoft.com/en-us/library/ee658124.aspx

> The logical consequence of these principles should be that each element of the programming language (class, module) should be able to clearly declare what concern or responsibility it is responsible for. The same goes beyond what a programming language can express.

> If we adhere to the Information Hiding as advocated by Parnas, the logical consequence of these principles should be that each element of the programming language (class, module) should be able to clearly declare what design decision it is hiding internally.


---

## When naming gets creative to enforce a design decision

/**
    * This method simply acts a friendly reminder not to implement Matcher directly and
    * instead extend BaseMatcher. It's easy to ignore JavaDoc, but a bit harder to ignore
    * compile errors .
    *
    * @see Matcher for reasons why.
    * @see BaseMatcher
    * @deprecated to make
    */
   @Deprecated
   void _dont_implement_Matcher___instead_extend_BaseMatcher_();

Hamcrest Matcher method "don't implement Matcher ___ instead extend the Base Matcher" is an impossible to miss useless documentation method !

The funny things is that in this example of Enforced Guidelines, the enforcement is done by the very potential violator.

---


Design for change

--
--

Can you imagine a language where function would refer where they are called, as a list of each call site? It would be quite unmaintainable. Passive patterns participants


---



-----
Context Diagram

Logical

Class-Level: @Port (unique port name = String, mode = IN, OUT, IN_OUT)

Then by consolidation it does not work because there can be many more port potentialities than actually used for a particular instance. It would work by taking into account one particular wiring configuration, eg Spring configuration.
----
Use-case context diagram derived from Cucumber, but what for?

Roles (stick people or external systems) -->* Features (boxes within the system boundary)

// could it be generated from the Cucumber feature files narratives?
System diagram
Roles * --> System

// could it be generated from the use-cases diagrams? (just by hiding the features and only keeping the system boundary)

// or just declare the stuff at macro-level, either in code or as plain DSL text? But would require maintenance too.

--
Example from the web

@ComponentInput(
description = "The frequent itemsets found by an <i>Apriori</i> module. These are ” + "the item combinations that frequently appear together in the original examples.”, name = "Frequent Item Sets”)
final static String DATA_INPUT_FREQ_ITEM_SETS = "Frequent Item Sets”;

@ComponentOutput(
description = "A representation of the association rules found and accepted by this module. ” + "This output is typically connected to a <i>Rule Visualization</i> module.”, name = "Rule Table”)
