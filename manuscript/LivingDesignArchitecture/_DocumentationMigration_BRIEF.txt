Guidebook: a mix of evergreen and living documents covering the big picture: persona, vision, stakes (text or slides), Quality Attributes (code as a DSL), brief glossary, a few key scenarios, external actors in a context diagram, principles (annotations with rationale), technologies & dependencies (comments in Pom manifest)



### TO ADD TO ARCHITECTURE SECTION

@abdullin: Started developing a new module, using auto-generated diagram as first development feedback. Fast feedback FTW! http://t.co/PU0puXN2L3



## Enforced Architecture

Architecture is a lot about self-imposed constraints:
  restricted dependencies
  segregation of elements by chosen criteria
  hygiene rules and guidelines
  chosen architectural styles...

You can spend time documenting all that in guide books and prescriptive documents. Or you can try to enforce them automatically. For example during the builds you can verify that the code satisfies the hexagonal architecture, using tests or assertions at runtime.

It's interesting to notice that this is often only possible provided that your code is well-annotated.



-----

# Case study

Turn you PPT documentation into a living one! Put the knowledge from the PPT back into the source code, whenever they fit best:

- vision & goals
- pseudo-code / sequence diagram
- ASCII diagram
- description of main modules and methods
- comments in config items

#migration
Mining existing written documents: emails, slides, reports, meeting minutes, forum posts... To try to find why it was decided like that.
--

## Strangle your specs/documentation!

Gilles Philippart (@gphilippart)

Deprecate / remove + redirect, perhaps with a one-off migration from Word to Markdown so that further maintenance and strangling can be done with just plain test in source control.


## Semantics from the use / proximity with other concepts (Mathieu Pauly)



## Marginal documentation

Focus on the new increments that can live in their own clean bubble context.

Just like architecture and guidelines, the legacy strategy may also be enforced using automated tools. For example you may want to forbid any new commit from having direct references (java import or C# using) on a deprecated component.
