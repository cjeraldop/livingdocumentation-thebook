

On having accurate doc -> Enforced



# Make accessible
Example: the tool to display cron config for non developers

Google cron translate


## Extracted Documentation aka Single Source of Truth
This is the prefered way to ensure accuracy of a Living Documentation.

### Behavior-Driven Development

From https://t.co/v9iQSMmLoz

"When Cucumber is adopted solely as a tool to write automated tests without any input from business analysts they tend to become imperative and lose their documentation value.

This also makes them slow and brittle.


Extracted documentation comes in various cases.

### Curated Content (Literate-ish Programming)
A lot of precious knowledge is encoded in code, tests, configuration files or data files. Duplication is undesirable, therefore you want a mecanism to extract this Authoritative Knowledge from where it is to generate an always up-to-date documentation. If you can annotate the content with specific (intrinsic) tags, then you can also extract content according to some search criteria. For example you could extract only knowledge tagged as making sense to business people in order to generate a business-oriented documentation.

Making the documentation linear from code that is in a different ordering (compilation ordering, file name alpha ordering...).

Narrative ordering vs topological ordering

Classification by categories, "not that difficult" to implement.

Functional chapters to classify: @Billing @Legal @Compliance...

@MustKnow, @NominalCase @Fundamentals, @CornerCase, @TypicalUse

Not all scenario is equally interesting for everyone. Not all code or configuration file is interesting for documentation. How to filter out and extract just the few snippets that matter for a given documentation purpose? (Python Sphinx, BDD categories...).

You can review the code and copy snippets into a separate document, but you'll have to redo that every time the code changes.

Therefore:
Use Augmented Code or Convention over Configuration to add intrinsic categorization information to the source code artifacts. Then use that information to select content that matter for a given purpose.

Need pretty solid examples... @DeveloperGuide("hello-world")
@DeveloperGuide("extension-plugin-class")
@DeveloperGuide("extension-plugin-manifest")
@UserGuide("error-codes")

Augmented Code enables to use the same snippet of code for multiple purposes. This makes it possible to cherry-pick content out of already existing code or tests.

See: Glossary from Code, Augmented Code, Intrinsic Property, Curated Datasets

### Consolidated Knowledge
Sometime the knowledge is spread over many files, but you can still derive Consolidated Knowledge from them, without doing it manually. For example dependencies of several modules can be gathered into the total dependencies of the whole project.

> Picture: parts of a car together decide how the car looks like

### Module-Wide Knowledge
Some knowledge is Module-Wide: it is not related to a single file but it applies to all files within a module. For example a complete module provides the Shopping Cart feature, or another module is totally side-effect-free. This is often used with **Augmented Code**.

> Picture: all the engine parts need to resist to high temperature -> probably needs to use metal

### Standalone Statement (could also be in Low Effort part)
There is knowledge that is nowhere and that lives it's own life independently from the other artifacts; for the sake of completeness add this knowledge into its own Standalone Statement file.

> Picture law scriptures
> Picture: This new kind of car is for small families living in the city and going away for short weekends

Why does your project exist? Who's sponsoring it? What are the business drivers? What are the expected benefits, and what are the success criteria?

If you can answer all these questions, does it mean that everyone in the team also has this knowledge?

This knowledge is often just oral tradition: you need to talk to someone who was there at the time to get some of the answers to these questions.

Commonly you can also find some of the answers at random places in comments in the code, in your emails archives, somewhere in the wiki, or in documents spread over a department shared drive.

There are several issues with that:
* The knowledge is not structured and may be ambiguous or mixing various topics in the same document
* It is not easy to find
* The information is only for humans
* It is often project-related, and will therefore quickly become irrelevant

Therefore:


If you're really lucky the team is doing story mapping, or even better Impact Mapping, or is using the EVO method. If it's not the case then you should really consider starting Impact Mapping.


... Not clear

Need to make it into code or DSL. A mind map is a tree, that's easy to encode in a programming language. This code can then render itself into a syntax ready for mind mapping tools to render nicely laid out diagrams.

More importantly, you can now reference the nodes and leaves of the impact map directly from code. For example, you

## anti pattern: project oriented documents
There are process-heavy companies that require the use of standard file hierarchies, following company templates. What I often see is that most of the documents focus on projects. Projects begin and end, but the code remains.

Project-oriented documents are painful to read after the fact: they're full of noise and arguments that were meant to convince someone long ago, or to please some compliance rule. Now nobody cares.
