ALREADY INCORPORATED

See studies: "Types names help more than documentation"

http://www.slideshare.net/mobile/devnology/what-do-we-really-know-about-the-differences-between-static-and-dynamic-types

Comments can lie and they often do. So does naming, to a less extent. But types don't lie, or the program would not even compile.

A method name may pretend to be:

GetCustomerByCity()

But regardless of its name, if the signature and its types is actually:

List<Prospect> f(ZipCode)

You get a much more accurate picture of it really is. And it could even be improved: List<Prospect> could be a type in itself, something like Prospects or ProspectionPortfolio.

if it was Set<Prospect> we would know that a prospect can only be present once.


Types are more accurate than naming and comments.

**Therefore: Use types whenever possible, the stronger the better. Avoid bare primitives and bare collections. Promote them into first-class types. These types are named hence they are a support for communicating the Ubiquitous Language. Favor types over free comments, but don't neglect to describe the types in their structured comments.**

With just primitives you're in your own to decide if you can trust the naming or not. What does the Boolean "ignoreOrFail" mean? Enums add accuracy: IGNORE, FAIL

Optional<Customer> expresses the possible absence of result with total accuracy. In languages that support them, monads signal the presence of side-effects with total accuracy. In these examples the information is accurate because the compiler enforces it.

Generics: Map<User, Preference> tells a lot, whatever the variable name.
