%% TODO add to documentation by annotation (for design)

patterns help in documenting code. As a developer I often spend
(too) much time to write good Javadoc documentation; if I were offered some
more pattern tags I will be able to describe my intention with words, not sentences:
I will save time again.

## How does it map to the core principles?

Low-effort:
Easy to add to a class, method or even package
A unique location to describe a brief explanation along with links to further complete references
IDE "Find Usages" to find every occurrence, for on-demand documentation (instead of making it a document)


Collaborative:
The annotation is just a bookmark for a thinking that happened through pair-programming  or all-team on the whiteboard discussion
To train "on-the-spot" the colleagues who are going to maintain it

Reflective / Insightful:
If it's hard to annotate what you're doing it means you don't know what you're doing well enough. Ask for help to colleagues or grab a book on the topic.
When annotations drive the generation of a reporting document, e.g. a design diagram, this document provides feedback and insights. For example you may discover unexpected coupling and many other surprises.

Of course everybody also uses annotations to implement behavior like transaction demarcation and configuration of frameworks. Please don't get confused between annotations that implement behavior and annotations that are solely meant to transfer knowledge from the authors of the code to their successors.
