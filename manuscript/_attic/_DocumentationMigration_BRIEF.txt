Guidebook: a mix of evergreen and living documents covering the big picture: persona, vision, stakes (text or slides), Quality Attributes (code as a DSL), brief glossary, a few key scenarios, external actors in a context diagram, principles (annotations with rationale), technologies & dependencies (comments in Pom manifest)



### TO ADD TO ARCHITECTURE SECTION

@abdullin: Started developing a new module, using auto-generated diagram as first development feedback. Fast feedback FTW! http://t.co/PU0puXN2L3

To illustrate that, I would say that I decided to write this book to share about Living Documentation because:
- I love to code
- I hate doing the same thing twice
- I have documentation but I acknowledge there's a need to be fulfilled
- I tried many ideas to fix that, and many of them made my life easier, so now I'm hooked and would like other to be hooked too.


## Enforced Architecture

Architecture is a lot about self-imposed constraints:
  restricted dependencies
  segregation of elements by chosen criteria
  hygiene rules and guidelines
  chosen architectural styles...

You can spend time documenting all that in guide books and prescriptive documents. Or you can try to enforce them automatically. For example during the builds you can verify that the code satisfies the hexagonal architecture, using tests or assertions at runtime.

It's interesting to notice that this is often only possible provided that your code is well-annotated.


---
## Semantics from the use / proximity with other concepts (Mathieu Pauly)

-----
