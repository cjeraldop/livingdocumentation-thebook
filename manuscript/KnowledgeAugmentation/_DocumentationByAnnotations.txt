%% TODO add to documentation by annotation (for design)


Annotations or not annotation?

- Annotate presence
- Annotate absence
- Annotate less frequent case
- Annotate always: to add more information than just presence
- Annotate area-wide the most common value, and on each element when different

patterns help in documenting code. As a developer I often spend
(too) much time to write good Javadoc documentation; if I were offered some
more pattern tags I will be able to describe my intention with words, not sentences:
I will save time again.



moved to Augmented Code

> how to + patterns for annotations... In Java / C#|

## How does it map to the core principles?

Low-effort:
Easy to add to a class, method or even package
A unique location to describe a brief explanation along with links to further complete references
IDE "Find Usages" to find every occurrence, for on-demand documentation (instead of making it a document)

Low-Effort + Reliable
Refactoring-friendly, goes away when the class of method is deleted, survives after renaming etc.
Structured, many error and typos can be found at compilation
Annotations are tools-friendly, hence they enable automation of many tasks: generate diagrams, extract glossary from code, enforce coding style and design decisions...


Collaborative:
The annotation is just a bookmark for a thinking that happened through pair-programming  or all-team on the whiteboard discussion
To train "on-the-spot" the colleagues who are going to maintain it

Reflective / Insightful:
If it's hard to annotate what you're doing it means you don't know what you're doing well enough. Ask for help to colleagues or grab a book on the topic.
When annotations drive the generation of a reporting document, e.g. a design diagram, this document provides feedback and insights. For example you may discover unexpected coupling and many other surprises.

Of course everybody also uses annotations to implement behavior like transaction demarcation and configuration of frameworks. Please don't get confused between annotations that implement behavior and annotations that are solely meant to transfer knowledge from the authors of the code to their successors.
