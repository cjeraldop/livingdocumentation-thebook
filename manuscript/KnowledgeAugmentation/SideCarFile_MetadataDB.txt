# Sidecar files

(aka buddy files, companion files or connected files)

Sidecar files are files which store metadata that cannot be supported by the source file format. For each source file there is typically one associated sidecar file with the same name but a different file extension.

For example, some web browsers save a web page as a pair of an html file and a sidecar folder of the same name but with a *_folder* prefix. Another example is when a digital camera have the ability to record a piece of audio at the time of taking a picture, then the associated audio is stored as a sidecar file with the same name as the .jpg file, but with a .wav extension.

Sidecar files are like *external annotations*. They can be used to add any kind of information, like a classification tag or a free text comment, without having to touch the original source file on the file system.

The main problem with this approach is that when the file manager are not aware of the relationship between the source file and its sidecar file, then cannot prevent the user from renaming or moving only one of the files without the other, thereby breaking the relationship.

For this reason, I don't recommend this approach unless there is no other choice.

A> Old source control systems like cvs used a lot of sidecar files



*Reference:* [Side-Car Files](https://en.wikipedia.org/wiki/Sidecar_file)


# Metadata Database

A metadata databases is database which contains metadata for several source files. A famous example is the iTunes database, which contains a lot of metadata associated to each song and that don't fit within the audio files themselves, like playlists and recent listening history. The metadata may not fit within the file because the file format does not have a place to store them, or because it would not be a good idea to change the file at all.

Another reason could be that the metadata reference the file but are not really intrinsic to it, hence they should be stored somewhere else. For example, a photo should not store that its part of an album, we'd rather have the album being stored somewhere else. In a similar fashion, the url of the thumbnail of a photo is a metadata only of interest for the photo application, and it would be intrusive to corrupt the photo file to add that kind of metadata into its own structure, assuming it was even possible.

The main problem with this approach, just like with sidecar files, is that it's easy for the metadata database and the corresponding files to get out of sync if one of these files is renamed, moved or deleted without updating the database.

A metadata database should be the last resort choice when it's not possible to touch the files at all, therefore all metadata have to be stored elsewhere.

However it is also a convenient approach when the management of the metadata is done in bulk across all files at the same time, by different people than the people managing the files themselves.

For examples, if hundreds of photos are managed by a photographer but the metadata database is a plain spreadsheet managed by a librarian, then it is easy for the librarian to quickly add all the metadata in a column thanks to the ability to copy-paste, interpolate and calculate data that a modern spreadsheet application can offer, independently of the photographer and without risk of corrupting the photo file by mistake.
