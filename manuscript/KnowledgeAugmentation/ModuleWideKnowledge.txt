# Module-Wide Knowledge

*Knowledge that spans a number of artifacts that have something in common is best factored out in one place.*

In a software project, a module contains a set of artifacts (essentially packages, classes and nested modules) that can be manipulated together. On each module we can define properties that apply to all the elements it contains. Design properties and quality attributes requirements, e.g. being read-only, serializable, stateless etc. often apply on a whole module, not just on distinct element within.

We can also define the primary programming paradigm at the module level: Object-oriented, functional, even procedural or reporting style.

A module is also ideal to declare architecture constraints. For example we would have distinct areas for code written from scratch with high quality standard, and for legacy code with more tolerant standards. In each module we can define preferences of style like Checkstyle configuration, metrics thresholds, unit test coverage, and allowed or forbidden imports accordingly.

**Therefore: When there is additional knowledge that spans a number of artifacts equally within a module, put this knowledge at the module level directly, with the meaning that it applies to all the contained elements. This approach can also be applied to all elements satisfying a given predicate, as long as you can find a home for this declaration, like the pointcuts in aspect-oriented programming.**

## Many kinds of modules

Packages are the most obvious modules in Java and in other languages. But a package x.y.z actually defines more than one module: the module of its direct members x.y.z.*, and the module that also include every artefact included in its subpackages: x.y.z.**

Similarly, a class also represents a "module" for its member fields, methods and nested classes: x.y.z.A#*, and x.y.z.$*.

Eclipse "working sets" also define another kind of logical grouping similar to modules, as simple collections of classes and other resources. Tools like Ant also define filesets using lists of files and regular expressions: {x.y.z.A, x.y.z.B, x.y.*.A}. Like modules, working sets and filesets are usually named for easy reference.

Source folders, e.g. src/main/java or src/test/java obviously define coarse-grain grouping of elements too. Maven modules define bigger modules, at the scale of sub-projects. Pointcuts of Aspect Oriented Programming also defines logical groupings elements across various "real" modules.

Inheritance and implementation implicitly define modules too, such as "every subclass of a class or implementation of an interface": x.y.z.A+, and if it includes every member of every nested member: x.y.z.A++.

Stereotypes implicitly define the set of their occurrences i.e. the pattern ValueObject implicitly defines the logical set of every class that is a ValueObject.

Collaboration patterns such as *Model-View-Controller* and *Knowledge Level* also imply logical groupings such as the Model part of the MVC, or each level of the Knowledge Level pattern: KnowledgeLevel or OperationalLevel.

Design patterns also define logical groupings by the role played within the pattern, e.g. "Every abstract role in the Abstract Factory pattern":  @AbstractFactory.Abstract.*.

There are many other modules or quasi-modules implied by concepts like layers, domains, bounded contexts and aggregate roots. They can be orthogonal to each others, sometime nested.

## Module Arithmetics

The only operations available for modules are Union and Intersection. Of course named modules also need a mechanism to resolve them by name.

Some modules are naturally nested: packages -> packages, classes -> member fields, methods, classes; domains -> subdomains, bounded contexts -> aggregates. In this case we have an order relation between them.

The problem with large modules is their huge number of items, which often necessitates filtering, ranking and paging.


## In practice

All the techniques to augment the code with additional knowledge apply for module-wide knowledge: annotations, naming conventions, sidecar files, metadata database, or DSL.

A common way to add documentation to a Java package is by using a special class named *package-info.java* as a location for the Javadoc and any annotation about the package. Note that this special pseudo-class with a magic name is also itself an example of a sidecar file.

Package naming convention, like *something.domain*, can be used to mark a package as a domain model.
