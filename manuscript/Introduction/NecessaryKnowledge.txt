# The reasons why knowledge is necessary

When creating software, we go through a lot of questions, decisions and adjustments as we learn:

- What problem are we trying to solve?
- Oh no, what problem are we really trying to solve? (got it wrong the previous time)
- Trade and Execution are not synonyms, we made the confusion so far
- We tried this new DB and it didn't match our needs for these 3 reasons
- We decided to decouple the shopping cart and the payment because we noticed that the changes to one had nothing to do with changes to the other, please don't couple them again
- We found out that this feature is useless, we'll delete the code next month (note: we'll forget and this code will become a mystery from now on)
- We found out late that we had to comply to this official process for our change management and our delivery process (we didn't know before)

On existing software, when missing the knowledge developed before, we end up:

- Redoing what's already done, because we don't know it's there
- Putting a feature in an unrelated component, for lack of knowing where it should be, making it bloated, while the code about the feature is now fragmented across various components

If only we had the knowledge available to answer everyday questions like the ones listed below!

- Where shall I fix that issue safely?
- Where shall I add this enhancement?
- Where would the original authors add this enhancement?
- I don't know if I can delete this line of code that looks useless
- I'd like to change a signature but I don't know where the impacts will be
- I need to reverse engineer the code just to understand a bit how its works
- The Business Analysts keep on asking us to tell them the business rules by checking directly the code
- A customer asks for a feature but we don't even know if it' already supported of if it requires new developments
- We have the feeling that the way we evolve the code is the best possible, but we lack a complete understanding of how it works
- We always have to look everywhere in the code to find where's the part that deals with a particular feature


The cost of lack of knowledge mainly manifests itself in the form of:

- **Waste of time** (time that could be better invested in improving something else)
- **Sub-optimal decisions** (decisions that could have been more relevant, i.e. cheaper in the long term)

These two expenses compound for the worst over time: the time spent on finding the missing knowledge is time not spent on taking better decisions. In turn, sub-optimal decisions will compound to make our life progressively more miserable, until we have no choice but to decide that the software is no longer maintainable, and start again.

It sounds like a good idea to be able to access the knowledge that is useful to perform the development tasks.


---

## "And now for a pedantic word: Stigmergy"

Michael Feather recently shared a link to a fantastic [article online](http://ubiquity.acm.org/blog/why-cant-programmers-be-more-like-ants-or-a-lesson-in-stigmergy) by Ted Lewis who introduces the concept of stygmergy in relation to our work in software as a team:

> Stigmergy is a mechanism of indirect coordination, through the environment, between agents or actions. The principle is that the trace left in the environment by an action stimulates the performance of a next action, by the same or a different agent.
> [Stigmergy on Wikipedia](https://en.wikipedia.org/wiki/Stigmergy)
>
> The French entomologist Pierre-Paul Grassé described a mechanism of insect coordination he called "stigmergy" —work performed by an actor stimulates subsequent work by the same or other actors. That is, the state of a building, code base, highway, or other physical construction determines what needs to be done next without central planning or autocratic rule. The actors —insects or programmers- know what to do next, based on what has already been done. This intuitive urge to extend the work of others becomes the organizing principle of modern software development.
>
> Ants use a special type of chemical marker —pheromones— to highlight the results of their activity. (...)

Similarly, programmers manufacture their own markers through emails, Github issues and all kinds of documentation that augments the code itself. As Ted concludes:

> The essence of modern software development is stigmergic intellect and markers embedded within the code base. Markers make stigmergy more efficient, by more reliably focusing a programmer’s attention on the most relevant aspects of the work that needs to be done.

----
