# Defining a Documentation Strategy

A documentation strategy does not have to be right at the first try. It should evolve

## When LD is not the right fit

- Goals? why? Risk-Adjusted or Benefit-Adjusted: A matter of retrospective
- Let the team decide how to implement,



## A Strategy must match people aspirations

Developers:
- Don't like writing documentation
- Like to write code
- Love code, doing more with code is appealing
- Hate manual, repetitive tasks
- Love automation
- Are proud of beautiful code
- Love plain text and their favorite tools
- Love logical things: text-first, DRY
- Love to exhibit mastery and geek culture
- Want recognition of skills
- Empathize with real-life messy situations (like everyone)

Managers:
- Love to see things they usually don't see
- Love to see things presented in ways they can feel, and understand whether it's getting better or worse
- Love documentation to be more turnover-proof

Resonate with that. It's critical for a documentation strategy to exhibit a vision that everybody would genuinely like to happen.

Nancy Duarte (Resonate) offers suggestions on how stimulate excitement and enthusiasm through the way you present. For example if you've decided to introduce Living Documentation into your team or company, you could start with asking yourself "Why do I want to share and promote that? Why am I excited?"

To illustrate that, I would say that I decided to write this book to share about Living Documentation because:
- I love to code
- I hate doing the same thing twice
- I have documentation but I acknowledge there's a need to be fulfilled
- I tried many ideas to fix that, and many of them made my life easier, so now I'm hooked

What is, to be contrasted to the new world:
- You don't write documentation, and you feel guilty about that
- You write documentation, and you'd prefer write instead
- You're looking for documentation and when you find some you cannot trust it because it's out of date
- When you create diagrams you're frustrated it takes some much time
- Looking for the right document itself takes so much time for little result that you often give up and try to do the work on your own
- When you collaborate the agile way with lots of conversations, you feel uncomfortable because your organization expects to deliver more traceable and archived documents
- You do a lot of tedious work manually, including deployment, explaining stuff to external people, and paperwork


## An example of a maxim on improving the documentation everyday

> **Make the value you've added permanent**
> -- Andy Schneider

> - Comment code that you are working on so the next person doesn't have to go through the same pain.
> - Find design documents to update and update them.
> - Document how to run any tests you've developed.
> - Give any useful scripts you've developed to the local toolsmith (there is always one).

%% Insert Guest testimony here

You can define the content of the documentation with the help of a skills matrix or through a team workshop

### Team workshop with sticky notes

Let each team member add what each piece of knowledge they'd like to have on sticky notes on a wall. Then have everyone decide by consensus or dot-voting what should be documented first. This could become your knowledge backlog. Every few weeks or every iteration you take one or two item and decide how to address it: shall we pair-program? Shall I augment the code to make this structure visible in the code itself? Shall you document your specific knowledge of this area as an Evergreen document on the Wiki?

This session can be done within your retrospective.

### Skills matrix

An alternative is to create a skills matrix with predefined areas, and ask each team member to declare their level of proficiency for each area. One limitation is that the matrix will reflect the views of the person creating it, and will ignore the skills areas ignored or neglected by this person.

You could do use a skills matrix as a chart with many quadrants, as described by Jim Heidema in [his blog post](http://www.agileadvice.com/2013/06/18/agilemanagement/leaving-your-title-at-the-scrum-team-room-door-and-pick-up-new-skills/)

> This is a chart that can be posted in the room to identify the skills needed and the people on the team. On the left column you list all the team members.  Along the top you list all the various skills you need on the team. Then each person reviews their row, looking at each skill, and then identifies how many quadrants of each circle they can fill in, based on the range below the chart.  The range is from no skills through to teach all skills in a given column.
>
> 0: no skill
> 1: basic knowledge
> 2: perform basic tasks
> 3: perform all tasks (expert)
> 4: teach all tasks
