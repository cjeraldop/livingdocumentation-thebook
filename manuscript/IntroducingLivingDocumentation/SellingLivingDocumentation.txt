# Selling Living Documentation to management

A common question about a new approach is "how do I convince my management to try it?". There are different answers depending on your context.

The first, and my preferred, answer is that it is up to the team to select the way to meet the expectations of other stakeholders. It is everyone's business to require that knowledge is shared, however does the team really need approval to decide how to perform its work efficiently? Keep in mind that everyone in the team, developers, testers, business analysts are also stakeholders of the project. To better deliver to other stakeholders they have to take care of themselves first. They also need enough autonomy to try practices, and as Woody Zuill says "to amplify what works" and to stop what does not.

If your company and managers are proud to be "really agile" and to "empower their teams", then they should trust the team, and you should not need any formal approval to try Living Documentation or any of the related recommended practices, even the most radical ones like pair-programming or mob-programming. Of course this autonomy comes with the full responsibility for the actual results.

That said, it may be the case that putting in place a living glossary or a living diagram for the first time requires from half a day to two days of work. This may be too long to do the effort without having it in a formal backlog, in which case you need to convince someone.

If there is a documentation budget or documentation tasks planned already, you may also want to reuse that time to invest on living documentation instead. This again may again require an approval.

## Start with an actual problem

As usual when introducing new approaches, don't preach. Instead, show the benefits, and the best way to do that is on a real problem, when it is time to tackle it.

To find out a real knowledge problem, you may ask around you "Is there anything you would not feel comfortable working on alone?", or "Is there anything that is not clear to you?". You may not ask anything but just pay attention to the questions asked during the day, the week or the iteration. Some will hint at candidates for documentation.

One efficient way to know what's important is to carefully take notes of everything you mention or explain to each newcomer, during the on-boarding period. If you ask the new joiners for an astonishment report, it will also contain candidates for stuff that either should be fixed, or that should be documented because they are surprising.

Once you identified a knowledge sharing issue, make sure that everyone acknowledges it is a genuine documentation problem worth tackling. Then propose a solution, inspired from this book. You don't have to use the term "Living Documentation", you can just mention that this approach has already been done in other companies, in large-ish corporations, and in small early startups too.

You may also start with something small, done on your own time, that you can show to the managers you want to convince. It may be a report, or a diagram, or a mix of a documentation plus some indicators managers are particularly interested in. Emphasize how you can save time and improve the satisfaction thanks to the approach.

Once it is done, the benefits should be enough to convince of keeping the approach. And if the benefits are not there, please tell me so that I can improve the book. Still, even in the worst case you will learn something valuable in the process, and you will probably have one example of a traditional documentation that was just a bit more expensive than usual.

## A Living Documentation initiative

If there is a lot of pressing documentation issues, you may want to go with a bigger ambition on the topic. This book is also made for that purpose of pushing the idea forward and make it a standard package that can be a reference. Show the book to the people you want to convince. Show the video of talks on the same topic, I've done some already that were well-received judging by the feedbacks in the venues and on Twitter.

Showing the benefits on a first "pilot" case within the company remains the best option to start with. Nobody will pay much attention at first, but with early successes more people will try to replicate or to even formalize the initiative for the benefit of their career.

As soon as we're talking about an identified initiative, we have to convince upper management that it is worth investing time in the teams, and perhaps some additional coaching and consulting if needed. One way to sell Living Documentation is to consider that it is a prerequisite to achieve sustainable **Continuous Delivery**, a bit like testing is a pre-requisite too.

**Going fast is not possible unless the quality is under control at all time, thus we need a testing strategy with automated testing to the max.**

**Similarly, going fast in the long term is not possible unless the quality of the design and of the understanding of the business domain is under control at all time, thus we need a living documentation strategy.**

Many of the key reasons to adopt a Living Documentation approach are already in front of your eyes, and show in your weekly time-tracking and in the current state of your knowledge management.

Overall, my feeling so far is that documentation is a concern close to managers' heart. The matter of skills and knowledge transmission between the team members is already a common source of anxiety for the management; it represents a cost in time but more importantly in defects and mistakes:

- Skills matrix creation and updates.
- Turnover rate
- Time spent on-boarding newcomers
- Anxiety related to the Truck Factor, the risk of losing key knowledge is the team is hit by a truck when going back from lunch
- Ratio of defects and incidents caused by "I didn't know that".

Lack of documentation is a hidden cost, just like the lack of tests. Every change needs a complete investigation and an assessment, sometime even a pre-study. The hidden knowledge has to be mined again each time. Alternatively, the changes are made in a way that is not in line with the previous vision of the system, which makes the application increasingly bloated, making the matter worse over time. This may show like the following:

- Time to deliver a change
- Negative trends of any code quality metrics, perhaps the most telling being the mere size of the code base. If it grows regularly, it is probably a sign that the design is too weak. There is not enough refactoring to start with, and the each change is basically an addition.

And there are also the arguments on the documentation, or lack of thereof, in itself:

- Unmet, or not updated frequently enough, compliance requirements with respect to documentation
- Time spent on writing documentation, or on updating the existing documentation
- Time lost searching the right documentation
- Time lost reading documentation that is incorrect

You may want to perform a review of the actual quality of the existing documents that pretend to be the documentation, with a focus on various indicators:

- Number of different places where documentation can be found (including the source code, the wiki, each shared drive, team members machines etc.)
- Time of last update
- Proportion of authors of the last updates who left the team
- Proportion of rationale (explaining WHY not just WHAT) in the documentation
- Proportion of pages or paragraphs or diagram that can still be trusted
- Proportion of knowledge redundant between the source and another kind of documentation
- Short survey like "Do you know where I can find knowledge on that?" on a random set of concerns

And of course you can come up with many other ideas to help realize the actual state of everything documentation. If everything is fine and under control, then the only thing that Living Documentation may improve is the long term cost, thanks to team members working more together, automation and reduction of various waste.

Otherwise, Living Documentation can make documentation feasible again, at a reasonable cost and with an identified value added.

On the value side, it is worth putting the emphasis on the biggest benefits which are not just the sharing of knowledge, but especially the side benefits in improving the software in the process, as described in "Beyond Documentation" part of the book.

## Contrasting current situation to the promise of a better world

## A Strategy must match people aspirations

Nancy Duarte, the author of the book Resonate, offers suggestions on how stimulate excitement and enthusiasm through presentations. It starts with knowing why you want to change things. If you've decided to introduce Living Documentation into your team or company, you could start with asking yourself "Why do I want to share and promote that? Why am I excited?"

Then the current situation can be used in contrast with the new practice you'd like to promote. Here are examples of common frustrations that could be contrasted with the benefits of a Living Documentation approach:

- You don't write documentation, and you feel guilty about that
- Explaining things to team members, new joiners and stakeholders outside the team takes a lot of time, on an on-going basis
- You write documentation, and you'd prefer to write code instead
- You're looking for documentation and when you find some you cannot trust it because it's out of date
- When you create diagrams you're frustrated it takes so much time
- Looking for the right document itself takes so much time for little result that you often give up and try to do the work without
- When you collaborate the agile way with lots of conversations, you feel uncomfortable because your organization expects to deliver more traceable and archived documents
- You do a lot of tedious work manually, including deployment, explaining stuff to external people, and paperwork, and you have the feeling that it could be avoided

Of course it's up to you to customize and decide which items make the most impact in your context, and to decide what part of Living Documentation remedies that frustration most.

More generally, and at the risk of being caricatural, developers usually:

- Don't like writing documentation
- Like to write code
- Love code, doing more with code is appealing
- Hate manual, repetitive tasks
- Love automation
- Are proud of beautiful code
- Love plain text and their favorite tools
- Love logical things: text-first, DRY
- Love to exhibit mastery and geek culture
- Want recognition of skills
- Empathize with real-life messy situations (like everyone)

Whereas managers usually:
- Love to see things they usually don't see
- Love to see things presented in ways they can feel, and understand whether it's getting better or worse
- Love to see documentation they can themselves show someone else and be proud of
- Love documentation to be more turnover-proof

Resonate with all that. It's critical for a documentation strategy to exhibit a vision that everybody would genuinely like to happen.
