# Introducing Living Documentation

It starts with someone willing to improve the current state of affairs in either the documentation or the way software is done. Since you are reading this book you are probably this person. You may want to start Living Documentation because you're afraid to lose knowledge, or because you'd like to go faster with the relevant knowledge more readily available. You may also want to start it as a pretext to show flaws in the way the team is making software, e.g. in the lack of deliberate design, and you expect the documentation to make it visible and obvious to everyone.

The hardest step is to find out a compelling case of missing knowledge. Once you have a demonstrated case, and provided you can solve it with one of the Living Documentation approach, then you're on the right track.


## Undercover Experiments

If you feel alone in your interest for Living Documentation, you may want to start gentle, at your own pace, without making a lot of noise about it and most importantly, without asking for authorization. The idea is that documenting, whatever the way it is done, is part of the natural work of a professional developer.

**Introduce nuggets of Living Documentation naturally as part of the daily work. Start annotating your design decisions, intents and rationales at the time you're making them. When there is some slack time or a genuine need for documentation, turn the allotted time to create simple documentation automation like a simple living diagram or a basic glossary. Keep it simple enough to have it work in a few hours or less. Don't talk about it as a revolution, but just as a natural way to do things efficiently. Emphasize the benefits, not the theory from this book.**

Of course, when people become more interested in the approach, you can talk about "Living Documentation as a topic", and direct them to the book.

## Official Ambition

Another way to introduce Living Documentation is through an official ambition.

Going the official route usually starts from management, or at least requires that the management is a sponsor. Documentation is often a source of frustration and anxiety for the managers, therefore this topic is often promoted even more by managers than by the development team itself.

Having a sponsor is good news: you have dedicated time and perhaps even a team to implement. The counterpart is that as an official ambition, it will be highly visible, closely monitored, and there will be pressure to deliver something visible quickly. This pressure may endanger the initiative by forcing success. But Living Documentation is a discovery journey, there's an experimental side to it and there is no clear path to success in your own context. You'll have to try things, decide that some are not applicable, adjust other to your own cases. This is better done without excessive scrutiny by higher-ups.

This is why I'd recommend to start with Undercover Experiments, and only promote the topic as an Official Ambition after you've found the sweet spots of Living Documentation in your environment.

## New Things Are difficult for two reasons: they have to work, and they have to be accepted.

A typical path I advice is to start with creating appetite, then try for quick opportunities to show benefits, and then to grow from there.

1. Start by creating awareness in the larger audience. A great way to do that is through a all-audience talk, informative and entertaining. The point is not to explain how to do things, but to show how life could be better in contrast to the current state of affairs. [Nancy Duarte's book Resonate](http://www.duarte.com/book/resonate) is full of advices on how to that well. Listen to the feedback at the end of the session and a few days later to decide whether the appetite is there to go further. Otherwise, you may want try again some weeks or months later, or you may decide to go undercover first.

1. Spend some time with the team or an influencer team member to identify what knowledge would most deserve to be documented. From that propose quick wins to try as short items in the backlog, or as part of time dedicated for improvements. Retrospectives are also a good time to consider Living Documentation issues and propose actions. It is important to focus on real needs that many people find important.

1. Build something useful in a short period of time, and demo it like any other task. Collect feedback, improve, and collectively decide of whether to expand now or later, if needed.

## Starting gentle

As a consultant I regularly sit with teams in companies of all sizes. When they ask to create more documentation, I tend to suggest the below stone steps.

First of all, I remind that interactive and face to face knowledge transfer must be the primary mean of documentation, before anything else.

This said, we can then consider techniques to record the key bits of knowledge that have to be known by everyone, that every newcomer has to learn, and that matter in the long run.

At this point they say "Let's write that stuff in our Wiki". Which is fine, as long as we understand that a Wiki is a nice place for Evergreen Documents, for knowledge that does not change often. For everything else, we can do better.

Where to start? I like to mention various ideas very quickly to scan the interest of the team members. For example I would mention briefly each of the following:

- Adding a simple README describing what the project is about
- Adding a simple Decision Log as a Markdown file in the base directory of the project, with a recap of the 3-5 main architectural and design decisions since its inception
- Tagging the code with a custom annotation or attribute to highlight the Key Landmarks or the Core Concepts. Combined with the search by reference in the IDE this becomes a simple yet effective way to provide a sightseeing map of the code base.
- On a similar note, tagging the code with Guided Tour annotation or attribute to provide a simple way to follow a request or a processing end-to-end across the various fragments of code, across the various layers or modules, in a linear fashion. Again this relies on the search by reference in the IDE.
- Turn the most important Napkin Sketch into an ASCII diagram in the Decision Log file.

This list deliberately contains only stuff that can be done and committed within a short period of time. For example we've been able to add and commit a decision log with 5 past key decisions, marking three Key Landmarks plus a Guided Tour with 5 steps within 2 hours. This includes the creation of the two custom attributes for the Key Landmarks and the Guided Tour respectively, checking the search in the IDE worked well and checking the Markdown rendering was fine in TFS.

The goal so far is more to create awareness and interest by reaching attractive results quickly. The goal is to hear "Wow, I really like that approach, I'm hooked now!" after doing that.

Another goal is that just by going through these simple steps, the team members can already experience the "Beyond Documentation effect": "Ouch, I now realize how sloppy and half-finished our structure is." That's a lot of goodness for 2 hours!

Given genuine interest from the team and some available time, we can go further and try Word Clouds, Living Glossary or Living Diagrams.


## Going big and visible

After a gentle start, you may want to go for bigger ambitions. I'm not saying it is always a bad idea, but it may be dangerous for several reasons:

- Visible ambitions usually need to exhibit symbolic progress shown by a quantity of outcomes or even KPI's. But does it mean anything "to be 40% Living Documentation"? Doing living documentation for the sake of it will eventually discredit the approach.
- The benefits can be deferred after months, which can make it hard to show the return on investment if measured over 3 months.
- As mentioned before, it may take various adjustments when applying the techniques from this book in your particular context; these adjustments may be perceived as failures in the meantime.
- What's useful for the team may not be what the management expected. If that's the case, put yourself in the management shoes: what would make you happy with respect to documentation? If you can make previously hidden knowledge accessible to non developers, it may be a good thing for everyone. The managers will be able to judge something by themselves, based on objective facts extracted from the code base. And when you setup the Living Diagram or whatever other mechanism you have an opportunity to do the curation and the presentation in a way that promotes your agenda, for example to encourage a good thing or to warn against a bad one.

In any case, remember that documentation, living or not, is not an end to itself but just a mean to accelerate delivery. This acceleration of delivery can be direct, when decisions are taken faster thanks to the knowledge readily available through the living documentation. It can also be indirect, when creating the documentation raises awareness on everything sloppy in the system,  in the thinking or in the communication between the stakeholders. By fixing the root cause you improve the whole system, which in turn will accelerate delivery.

## A Tale of introducing Living Documentation to a team member

One week I met with a team member who was interested in learning more on Living Documentation. He was just curious, not convinced. But he was at least curious, which is a good start.

### Conversations first

I start with questions in a conversational style. I'm supposed to explain what Living Documentation is; instead I start by putting myself in the shoes of another team member willing to learn about the project:

"Tell me about the current projects." - "I work on 3 different projects." - "Let me take notes and sketch what we say on this flipchart."

> What's the name of the project? What's its purpose, and for who?
>
> What's the eco-system with the external systems and external actors? What are the overall Input and Outputs?
>
> What's the execution style: is it interactive, a nightly batch, a Github hook? What's the main language: Ruby, Java & Tomcat?

These are all standard questions so far. Answers come naturally. But then I ask:

> What is the Core domain in your opinion?

This comes at a surprise. He needs some time to think about it. His first moment of surprise is that the answer was not obvious, after several months on the project.

"Oh... Now that you mention that, I now realize that our core domain is probably the way we insert deep links that point to our system in the feed we provide to the external partners, so that they bring us qualified inbound web traffic. I didn't think about it this way before, and I'm not sure everyone in the team is aware of that."

"But is this deep link thing the raison d'être for the whole project?" - "Yes, absolutely." - "Do you think everyone should know about that? - "Obviously, yes". - "So we should document that somewhere?" - "Of course!"

### First Debrief

Now is the time to debrief and introduce the basic concepts of Living Documentation:

"You realize how I learnt precisely what I was interested in through conversations?".

Living Documentation is primarily about **having conversations to share knowledge**. My goal in the conversations so far was to show I could learn a lot of what matters to me, quickly and without wasting time on any other stuff. Interactive conversations and the high bandwidth of talking are hard to beat, especially with the support of the flipchart.

> It was great that you sketch, it helped me check your understanding of what's I said.

The second point I can introduce now is that some of the knowledge we talked about so far needs to be recorded in a persistent form. And the good thing to absolutely recognize is that most of this knowledge so far is **stable over time**. This is lucky, so in this case we can use **Evergreen Documents** in any form: Wiki, text etc. But we must make sure not to mix any volatile and short-lived knowledge, or we immediately loose the benefits of Evergreen documents: documents that don't need any maintenance yet remain true forever (or for a very long period of time).

There is a third point here already: the concept of "Deep Linking" we uncovered is a standard concept already documented in the online literature. As such it's **Ready-Made Knowledge**. We can link to it on the web, so there is no need to explain what it is again. We're lazy.

One last point we begin to see in this last example is that by paying attention to the documentation, even the person with the knowledge also learns and gains additional awareness in the process. That illustrates the benefits "Beyond documentation", and it's probably the biggest value added of a Living Documentation.

### Time to talk about the code

After all my questions on the context and on the problem side, I'd like now to know more about the solution side, in other words the code:

"How's the code organized in packages & dependencies?"

Then we draw the folder hierarchy on the flipchart. That's concrete, I recognize a structure very close to the Hexagonal Architecture (no, it's not a coincidence).

I know that it's hard to tell your knowledge because what you know is, well, obvious cause you know it, so everybody knows it, right? That's the curse of knowledge. So I like to provoke a little bit:

"Imagine you're all gone, after the project is delivered and there was no budget left to keep you. Then a year later the project has to resume with additional features to deliver, so a new team is formed; what risks do you see that the new team will degrade the current system?"

In this fictive situation, it's easier to answer:

"I'd say junior developers new to the project may put business logic in the REST endpoints, and that would bad". - "Sure it would be bad. Still I think there should be no need to tell that in 2016, it's supposed to be known by any professional developer nowadays."

More generally, they mentioned that they were doing everything pretty much standard, with no surprise. This means no need for documentation on all the standard stuff. Also, the code is rather clean, so it tells HOW it's done. It just doesn't tell WHY it's done this way.

Any other risk new team members could degrade the design of the system by accident?

"In fact we designed a whitelist and a blacklist mechanism to filter content that we export depending on the external partner. But we did it in such a way that the code is totally agnostic with respect to the external partner. Only their configuration is specific."

"You mean that does not necessarily show from the code without giving any hint?" - "Yes, it's likely that a newcomer would quickly add an IF statement around the next partner-specific behavior they need to support, and break the design as a result."

### Decision Log & Guided Tour

We should record that design decision. We can do that in a **Decision Log** as a plain Markdown file at the root of the project, in the source control. It's quite concise: date, decision, rationale, consequence. Three sentences can be enough.

What else? The code of the project is not bad, but still is not obvious to follow a user request through all its stage in the system.

"For that we could do a guided tour", I say. And I explain and show how to create a custom annotation ```@GuidedTour``` to mark each step in our guided tour. He quickly devises the best 7 steps of the guided tour and adds the annotation on each of them. It took 20 minutes to introduce the first tour.

Furthermore, through the tour I found out that a significant part of the overall behavior was a cache on calculations on web-services, in a ```Read-through``` fashion: that's Ready-Made Knowledge again!

We then create another custom annotation ```@ReadThroughCache``` to mark that knowledge, with a brief definition and a link to a standard explanation on the web.

After 2 hours and a half of talking and creating annotations to support our very first Living Documentation, it's time to get feedbacks, and it sounds encouraging:

"I like the idea of using annotations for documentation: it's lightweight and easy to add without asking the right to do it. I can start solo and locally. In contrast, other techniques like Living Diagram are more like team decisions I think. And linking to Ready-made knowledge saves time and is more accurate than if I tried to explain it myself in writing."

I concur, mentioning that it's part of an Embedded Learning approach:

"It's often the case. Simple annotations in the core also hint your team members at interesting ideas in the literature they may not know otherwise."

But he's not totally convinced that it works for everyone:

"Yes, if they realize they don't know and are curious to learn more. Some will read the links and learn by themselves, but some will probably not and will ask me instead..."

"- But I see that as a feature! This invites a discussion. That's another opportunity for learning, probably for both of you."


## Common objections

It's not because you'd like to start doing living documentation that everyone around agrees. Perhaps they don't have the need, or they don't see the benefits.

### Annotations are not meant for documentation

"I don't like to use annotations for documentation because I don't like adding code that does not execute"

- "You know, you do it already when you mark code as [Obsolete] or @Deprecated".

- "Oh, yes. Fair point. Why not then."

For the sake of simplicity, let's be caricatural and let's polarize comments vs annotation as good vs bad: "Comments are bad and should be avoided; but if the information to record is really important, then it's worth its own custom annotation"

### "We do it already"

That's a standard objection to anything. To some extent everything looks like everything.  "At the end it's the same thing".

Yes, you certainly do the practices in this book to some extent, but is that really a living documentation approach? The keyword here is *deliberate*. If you happen to do some of that by chance then it's fine, but it will be even better when done deliberately. It's up to your team to decide where to put the cursor and what's your documentation strategy. Such a strategy has to be emergent and deliberate. It must fit your particular context and be accepted by everyone involved.

Your documentation strategy will mix practices you already do, push some of them further, and introduce new practices that sound promising. And you will adjust all that over time to get the most benefits with the minimum of efforts.

"We have all the knowledge that we need"

Perhaps you do have all the knowledge because you were there before the rest of the team, are you sure everyone else feels so comfortable?

> If you're having lots of technical meetings, it MAY indicate that your internal documentation could be better
> Mark Seeman (@ploeh) on Twitter

Perhaps you just hate documentation, and I can totally understand that. But please acknowledge what you don't know.

## Migrating legacy documentation into a Living Documentation

If you have legacy documentation, you may leverage on it. This avoids the Blank Page syndrome, and offers an opportunity to review past knowledge in a new light. You have old PowerPoint documentation? Turn it into a living one! Put the knowledge from the PPT back into the source code, whenever it fits best:

- Vision & goals could go into the README file, as Markdown
- Pseudo-code / sequence diagram could be made as plain-text diagrams or ASCII diagrams, or just replaced by a reference to a test doing the same scenario
- Description of main modules and methods could be done within the source code itself, through some class and module-level comments, annotations and naming conventions
- Comments in config items

Notice how all this knowledge escapes from shared drives and wikis to find a new home all in the source control.

>A It's also striking that the old content that was all concentrated within a few slide decks or Word documents becomes spread all over the code base when moving to Living Documentation. It may sound like a bad thing. Sometime you would prefer some overview slides kept together as one document. But for most of the practical knowledge, the best location to keep it is as close as possible to the place you'd need it.


You could perform a documentation mining on all existing written documents: emails, Word documents, reports, meeting minutes, forum posts, entries into various company tools like application catalogues... Every time a piece of knowledge *still sounds relevant after all this time*, then it's probably worth preserving.

In practice you would deprecate or remove the old content, possibly with a redirection to the new location of the similar knowledge or an explanation on how to find it from now on. A former colleague Gilles Philippart (@gphilippart) calls this migration "Strangle your documentation" by comparison with the Martin Fowler Strangler Application legacy pattern


## Marginal documentation

Your documentation endeavor does not have to be complete at first attempt. It should evolve over time. One approach that's often a good idea when willing to improve something is to focus on the marginal work:

**From now on, every new piece of work will follow a much higher standard.**

Improve your documentation marginally. By paying close attention to what you do from now on, even the parts of the legacy that still matter will be taken care of over time. And don't worry too much about the rest.

Sometime you can segregate the new addition to live in their own clean bubble context; this makes it easier to clearly set a higher standard of living documentation, which is nothing but a higher standard of everything: naming, code organization, top-level comments, clear and bold design decisions made visible in the code, plus the more "typical" Living Documentation stuff like Living Glossary and Diagrams, Enforced Guidelines etc.
