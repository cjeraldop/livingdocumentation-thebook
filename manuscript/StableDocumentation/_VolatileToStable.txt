## Volatile To Stable

*Make sure the direction of the coupling is from the more volatile to to the more stable elements.*

It's way more convenient to couple the volatile to the stable than the over way round. A coupling to something stable is not that expensive as there won't be many impacts from the dependency as it does not change often. On the other way round, coupling to a volatile dependency means you'll have to make changes all the time, whenever the dependency changes.

A common consequence is *Couple the Specific to the Generic, and the concrete to the more abstract, not the other way round*. This is implied by the fact that generic stuff is more stable; Being common for many cases and shared across many people, it should be stable. (If it's not it's not really generic, and the people in charge are doing it wrong).


For examples, to link (don't link the other way round)
- Link the implementation to the contract or interface
- Link the code to the requirements
- Link the tests to the (public) code
- Link the artifacts to the project goals and constraints
- Link the stakeholders to the goals
- Link the goals to the vision
