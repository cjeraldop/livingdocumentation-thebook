# Vision Statement

*Sharing the vision above the business goals*

Probably the single most important piece of knowledge everybody in the project should absolutely know is the vision of the project or of the product.

> A vision is a picture of the world as it will be when you're done working on it.
> - mccarthys

With a clear vision, the efforts of each team member can really converge into making the vision come true. A vision is a dream indeed, but a dream that is also call to action for the team who decides to make it real.

A vision often originates in a particular person, who tries to share it with others people using various means:

- a talk, lecture-style, perhaps with great visuals, like a TED talk
- repeating the pitch of the vision often and to everyone
- telling stories who illustrates or exemplify the vision
- writing down a vision statement on paper

All that is a matter of sharing knowledge, in other words it's documentation. A brilliant talk recorded in video may be the best documentation of the vision.

A vision has to be simple enough, and as a result it can be pitched in a few sentences. For example, the vision - or more precisely the "mission", of Fake Grimlock is "TO DESTROY SUCK ON INTERNET, REPLACE WITH AWESOME".

Startup love vision statements, but they sometime lack depth, by just extrapolating on existing successful startups: "It's like Google+, but for oenologists" (from the pitch generator [nonstartr.com](http://www.nonstartr.com). Instead, following the advices of Guy Kawasaki, good startups should decide to make the world a better place. For example, Change.org is a for-profit company, a certified B Corporation with a social mission stating: "On Change.org, people everywhere are starting campaigns, mobilising supporters, and working with decision makers to drive solutions."

The perfect companion to a vision statement is a couple of stories that illustrate it and make it more real.

A vision statement is usually on the stable end of the spectrum, at least compared to other project artifacts like source code and configuration data. But it is true that a company pivoting could change its vision several times.

Once the vision is set, it can be split into high-level goals.

## Domain Vision Statement

A particular kind of vision statement focuses on the business domain the product is about. The purpose of this document is to describe the value of the future system to be built, before it actually exists. This description may span several sub-domains, since at the beginning we don't know yet how the domain should be split into sub-parts. The point of the domain vision statement is to focus on the critical aspects of the domain.

In the words of Eric Evans:

> Write a short (~1 page) description of the CORE DOMAIN and the value it will bring, the "value proposition". Ignore those aspects that do not distinguish this domain from others. Show how the domain model serves and balances diverse interests. Keep it narrow. Write this statement early and revise it as you gain new insights.

Most technical aspects and infrastructure or UI details are not part of the domain vision statement.

Here is an example of fuel card monitoring for the fleet management:


> Fuel Card Monitoring of every incoming fuel card transaction helps detect potential abnormal behavior by drivers.
>
> By looking for abuse patterns and by cross-checking facts from various sources, it reports anomalies that are therefore investigated by the fleet management team.
>
> For example, a client using Fuel Card Monitoring with the GPS fleet-tracking features is able to bust an employee for padding hours, falsifying timesheets, and stealing fuel, or buying non-fuel goods with the fuel card.


## Goals

Goals are high-level information compared to all the details that describe how a system is built. As such, they are more stable, and the higher-level the more stable.

Goals are also long-term, must be known by everyone, and are critical because they drive every further decisions. There is not doubt they must be documented in a persistent fashion. Since they are also on the rather stable end of the frequency of change spectrum, traditional forms of documentation fit:

- MS Word documents
- Slide decks
- Paper document

This does not mean that it's easy to make a good documentation of the goals. It's still all too easy to waste a lot of time into a document that will not be read because it's too long or too boring.

This is on the goal side, but there's a documentation concern on the solution side too. The artifact the system is built from often neglect to document their relationship with the goals they attempt to satisfy.

--- OK SO FAR

TODO: mention Eric Evans pattern of the same name

> "Keep your requirements at a very high & general level until just before use." > - Woody Zuill [on this blog](http://zuill.us/WoodyZuill/2011/09/30/requirements-hunting-and-gathering/)

--

## Goals Statement


If you can answer all these questions, does it mean that everyone in the team also has this knowledge?

This knowledge is often just oral tradition: you need to talk to someone who was there at the time to get some of the answers to these questions.

Commonly you can also find some of the answers at random places in comments in the code, in your emails archives, somewhere in the wiki, or in documents spread over a department shared drive.

There are several issues with that:
* The knowledge is not structured and may be ambiguous or mixing various topics in the same document
* It is not easy to find
* The information is only for humans
* It is often project-related, and will therefore quickly become irrelevant

**Therefore:

If you're really lucky the team is doing story mapping, or even better Impact Mapping, or is using the EVO method. If it's not the case then you should really consider starting Impact Mapping.


... Not clear

Need to make it into code or DSL. A mind map is a tree, that's easy to encode in a programming language. This code can then render itself into a syntax ready for mind mapping tools to render nicely laid out diagrams.

More importantly, you can now reference the nodes and leaves of the impact map directly from code. For example, you can add annotations to declare what impact your module is targeting: @Impact(MyImpacts.REDUCE__PROCESSING_COST).

## Impact Mapping

Goals, stakeholders, capabilities, with performance targets

Most mind mapping applications (including MindNode, Mindjet MindManager, Curio, and MindMeister) accept indented text as an "import” option.

~~~~~~~~
Reduce processing cost of song royalties
  IT dept
    100x volumes
    Cheaper processing
  Sales tracking
    Hourly stats feeds
  Billing
    Online real-time reporting
~~~~~~~~

Make sure the goals quantified in the impact maps, even if they can't always be automated.

Carefully curated data sets can help describe more precisely the phrasing of the expected performances. For example a recorded file of market data activity during a highly volatile market episode can accurately describe what is meant by "highly-volatile markets", "crash", "quiet period" or "opening rush", and can even be used as a basis for acceptance testing.

## Don't Mix Strategy Documentation with the documentation of its implementation

Agile Testing p.80

> If your organization wants documentation about your overall test approach to projects, consider taking this information and putting it in a static document that doesn't change much over time. There is a lot of information that is not project specific and can be extracted into a Test Strategy or Test Approach document.
>
> This document can then be used as a reference and needs to be updated only if processes change. A test strategy document can be used to give new employees a high-level understanding of how your test processes work.
>
> I have had success with this approach at several organizations. Processes that were common to all projects were captured into one document. Using this format answered most compliance requirements. Some of the topics that were covered were:

- Testing Practices
- Story Testing
- Solution Verification Testing
- User Acceptance Testing
- Exploratory Testing
- Load and Performance Testing
- Test Automation
- Test Results
- Defect Tracking Process
- Test Tools
- Test Environments


## Traceability to the goals

Annotate key scenarios for intuitiveness, speed, usefulness... measurements, diagram generation, user manual or troubleshooting. Most typical cases, the "nominal" cases, can also be annotated as such so that they are highlighted in the generated specification report.

Materialize the performance targets as thresholds into your monitoring tools, with clear labels that link to the goals documented elsewhere.

----

Meta decisions matters a lot. Tradeoffs have to be made at meta level already, and they influence every decisions

Story mapping
Impact mapping

May refer to EVO definitions for more precise reference of Scales and Meter

Tips: Properties over examples, but still with concrete examples! Associative, idempotent etc



Idem with persona and specific profiles

At runtime, add a feature to extract reports (csv) of curated fresh data sets to import into more up to date additional realistic tests

--
Compliance to external formal framework

Eg agile inside within a CMMI company,

Predefine once the mapping between each activity and artifact.

Then it becomes possible to generate translated documents in the target framework without additional manual work.

%% LD - Documenting Goals
