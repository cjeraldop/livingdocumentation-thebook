# Knowledge Network

Information is more valuable when it is connected. Relationships convey additional information, and also bring structure.

On a particular topic, or on a project, all information is related to another in some way. On the internet, links between resources adds a lot of value: who's the author? Where to find more? What does this definition mean? Who's quoted here? In a book or paper, the bibliography tells you the context. Was the author aware of this publication? If it's cited in the bibliography then you can guess it was the case.

That's the same with your documentation.

**Therefore: Link knowledge to other related knowledge. Qualify the relationship. Define a clear resource identification scheme. It can be URL, or a citation scheme. Decide on a mechanism to avoid broken links.**

It's important to qualify the link with some meta-data: source, reference on the topic, review, criticism, author, is part of, implements, is composed of, etc.

A> Beware the direction of the links.
Just like in design, links should go from the less stable to the more stable.


## Linkable Knowledge

A great way to link to some piece of knowledge is to make it accessible through an URL.

Expose them as a web resource accessible through a link. Whenever necessary, refer to them through a link. Use a link registry to ensure the permanence of the links.

Many tools expose their knowledge through links: issue trackers, static analysis tools, planning tools, blogging platforms, social code repositories like Github.
If you want to link to a particular version of something, use permalinks (portmanteau of permanent link). If on the other hand you prefer to link to the most recent version of something, link to the front page, or index, or folder, that will usually show the latest version first.

## Volatile To Stable

*When you refer something, make sure the direction of the reference is from the more volatile to to the more stable elements.*

It's way more convenient to couple the volatile to the stable than the over way round. A reference to something stable is not that expensive as there won't be many impacts from the dependency as it does not change often. On the other way round, a reference to a volatile dependency means you'll have to make changes all the time, whenever the dependency changes. This sentence can be read in terms of code, and in terms of documentation just as well.

For an example in code, most programming language propose to couple the implementation to the contract or interface they implement, and not the other way round.

This illustrates the advice *Couple the Specific to the Generic, and the concrete to the more abstract, not the other way round*. This is implied by the fact that generic stuff is usually more stable than more specific stuff. Being common for many cases and shared across many people, it should be more stable, unless you are in pure hell.

In the universe of representing knowledge that we call documentation, prefer references the following ways, not the other way round:

- From the artifacts (code, tests, configuration, resources) to the project goals, constraints and requirements
- From the goals to the project vision

## Link Registry

All links need maintenance, because the web is a living thing, and so does your company internal web. When a link is broken, the last thing your want is to go through every document with the broken link to replace it with another one.


Therefore: **Don't directly include direct links in multiple places in your artifacts. Instead use a link registry under that control.**

This link registry gives you intermediate URL's as alias on the actual links. When a link is broken you just need to update the link registry in one single place to redirect to another link.

An internal URL shortener works perfectly as a link registry. Some of these shortener allow to choose your own pretty short link; not only the links become more manageable, they also get shorter and prettier.

I've seen companies install their own on-premise link registry. This is necessary for companies that care a lot of confidentiality of all their knowledge. You can find many URL shorteners that you can install on-premise, some open-source and some with commercial licenses.

## Bookmarked Search

Another way to link in a way that is more robust to change is to link to a bookmarked search instead of linking to a direct resource.

Imagine you want to link to the class 'ScenarioOutline' in a repository. You could link through a direct link, for example in Github you would use a link like this:

~~~~~~~~
https://github.com/Arnauld/tzatziki/blob/4d99eeb094bc1d0900d763010b0fea495a5788dd/tzatziki-core/src/main/java/tzatziki/analysis/step/ScenarioOutline.java
~~~~~~~~

The problem is that this class can move into another package, or its package can be renamed. The class itself could be renamed too, even though it is not so likely, as this concept has been known like this for a long time now. But any of these changes would turn the link into a broken link. That's bad.

We can make the link more robust but using a bookmarked search instead of the direct link. For example we would search for a Java class in this particular repository, with 'ScenarioOutline' in its name.

Using the [Github advanced search](https://help.github.com/articles/searching-code/), you would create the following search:

~~~~~~~~
ScenarioOutline // search for this term
in:path // search term must appear in the path name
extension:Java // the file extension must be Java
repo:Arnauld/tzatziki // only search in this one repo
~~~~~~~~

The result page of this search will show more than one result, but the one we're looking for is easy to grab in the list (here it is the second result in the list):

~~~~~~~~
.../analysis/exec/model/ScenarioOutlineExec.java
.../analysis/step/ScenarioOutline.java
.../pdf/emitter/ScenarioOutlineEmitter.java
.../analysis/exec/gson/ScenarioOutlineExecSerializer.java
.../pdf/model/ScenarioOutlineWithResolved.java
~~~~~~~~

Bookmarked advanced search is not just useful for more robust links. It is an important tool for living documentation in general. It offers the power of an IDE for everyone with a browser. By creating curated bookmarked searches, you create guided tours for navigating code and for quickly discovering everything related to a concept, like shown here around the concept of *ScenarioOutline*.

## Contract Test as a Reconciliation Mechanism

If you have a link to a direct resource then you need a way to detect when the link is broken.

You can use a [Broken Link Checker](https://www.google.fr/search?q=broken+link+checker) on your overall documentation for that.

You may also use low-tech Contract Tests that will fail when there is a change breaking the link. This way you know when you have to fix the link or the code so that they get back in sync. This is another example of a reconciliation mechanism.

You create a unit test to compare the code, which could change at any time, against hardcoded laterals which represent the external contract, like the link. When the test fails, you know you have to update the doc, or revert the change in some rarer cases.

For example if the qualified class name is used directly in a link, then the contract test would look like this:

~~~~~~~~
@Test
public void checkLinks() {
  assertEquals(
      "flottio.fuelcardmonitoring.domain.FuelCardMonitoring",
      FuelCardMonitoring.class.getName());
}
~~~~~~~~

Whenever we refactor, the check against the hardcoded literal would fail to signal we need to make a fix. 
