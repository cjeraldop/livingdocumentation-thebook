# Vision Statement

*Sharing the vision above the business goals*

Probably the single most important piece of knowledge everybody in the project should absolutely know is the vision of the project or of the product.

> A vision is a picture of the world as it will be when you're done working on it.
> - mccarthys

With a clear vision, the efforts of each team member can really converge into making the vision come true. A vision is a dream indeed, but a dream that is also call to action for the team who decides to make it real.

A vision often originates in a particular person, who tries to share it with others people using various means:

- a talk, lecture-style, perhaps with great visuals, like a TED talk
- repeating the pitch of the vision often and to everyone
- telling stories who illustrates or exemplify the vision
- writing down a vision statement on paper

All that is a matter of sharing knowledge, in other words it's documentation. A brilliant talk recorded in video may be the best documentation of the vision.

A vision has to be simple enough, and as a result it can be pitched in a few sentences. For example, the vision - or more precisely the "mission", of Fake Grimlock is "TO DESTROY SUCK ON INTERNET, REPLACE WITH AWESOME".

Startup love vision statements, but they sometime lack depth, by just extrapolating on existing successful startups: "It's like Google+, but for oenologists" (from the pitch generator [nonstartr.com](http://www.nonstartr.com). Instead, following the advices of Guy Kawasaki, good startups should decide to make the world a better place. For example, Change.org is a for-profit company, a certified B Corporation with a social mission stating: "On Change.org, people everywhere are starting campaigns, mobilising supporters, and working with decision makers to drive solutions."

The perfect companion to a vision statement is a couple of stories that illustrate it and make it more real.

A vision statement is usually on the stable end of the spectrum, at least compared to other project artifacts like source code and configuration data. But it is true that a company pivoting could change its vision several times.

Once the vision is set, it can be split into high-level goals.

## Domain Vision Statement

A particular kind of vision statement focuses on the business domain the product is about. The purpose of this document is to describe the value of the future system to be built, before it actually exists. This description may span several sub-domains, since at the beginning we don't know yet how the domain should be split into sub-parts. The point of the domain vision statement is to focus on the critical aspects of the domain.

In the words of Eric Evans:

> Write a short (~1 page) description of the CORE DOMAIN and the value it will bring, the "value proposition". Ignore those aspects that do not distinguish this domain from others. Show how the domain model serves and balances diverse interests. Keep it narrow. Write this statement early and revise it as you gain new insights.

Most technical aspects and infrastructure or UI details are not part of the domain vision statement.

Here is an example of fuel card monitoring for the fleet management:


> Fuel Card Monitoring of every incoming fuel card transaction helps detect potential abnormal behavior by drivers.
>
> By looking for abuse patterns and by cross-checking facts from various sources, it reports anomalies that are therefore investigated by the fleet management team.
>
> For example, a client using Fuel Card Monitoring with the GPS fleet-tracking features is able to bust an employee for padding hours, falsifying timesheets, and stealing fuel, or buying non-fuel goods with the fuel card.


## Goals

The vision is the single most important piece of knowledge everybody should know and keep in mind at all times. From that vision, many decisions will be made to converge to a solution and its implementation.

A vision alone is often not enough for people to start working, and we may have to precise intermediate goals, e.g. to share work between different teams, or to explore early what could be done and their alternatives.

Goals can be described as a tree of goals and sub-goals, with the vision at the root. Goals are lower-level than the vision, but they are high-level compared to all the details that describe how a system is built. As such, they are on the stable side, and the higher-level the more stable.

Goals are also long-term, must be known by most people, and are critical because they drive many further decisions. As a consequence they must be documented in a persistent fashion. Since they are also on the rather stable end of the frequency of change spectrum, traditional forms of documentation fit for documenting goals:

- MS Word documents
- Slide decks
- Paper document

This does not mean that it's easy to make a good documentation of the goals. It's still all too easy to waste a lot of time into a document that will not be read because it's too long or too boring.

W> Remember there is a danger in deciding goals early, which is the risk to over-constrain the project too early, at a time we know very little about it. This may impede the project execution badly.
W>
W> This is why Woody Zuill advices [on his blog](http://zuill.us/WoodyZuill/2011/09/30/requirements-hunting-and-gathering/) to "Keep your requirements at a very high & general level until just before use", as if they were perishable goods. We do not want to reject opportunities early because of premature sub-goals.

## Impact Mapping

A great technique to explore goals and organize high-level knowledge about a project or a business initiative is [Impact Mapping](http://www.impactmapping.org/), proposed by Gojko Adzic. It advocates working on the goals through interactive workshops and keeping the alternative goals together on the map, to keep options open during the execution of the project. This collaborative technique remains simple and lightweight, and visualizes assumptions and targets.

A key point is that it shows options and alternate paths to reach the goal. As such it does not constraint the execution as much as other traditional linear "roadmaps".

An impact map itself is rather stable, however it's recommended to reconsider it at low frequency, typically twice a year. On the other hand, tracking the project execution on the map obviously changes often if you release often, and should be not be done by modifying the map each time.

Let's take as an example the result of an Impact Mapping session for a company in the music industry, presented as a tree-like mind-map:

~~~~~~~~
Reduce processing cost of song royalties
  IT Department
    100x volumes
    50% Cheaper processing
  Sales Department
    Hourly stats feeds
  Billing Department
    Online real-time reporting (2s or less)
~~~~~~~~

Impact Mapping suggests classifying the goals by main stakeholders: IT department, Sales Department and Billing Department in the example above. It also requires the goals to be quantified in the impact maps, with quantitative figures of success, called the "performance targets".

There are other similar techniques like the EVO method [Gilb](http://gilb.com) to explore requirements in various ways.

With Impact Mapping or not, a tree of goals can be done with sticker notes on a wall. If you want to keep a clean representation for later you can use any mind-mapping applications like Mindmup, MindNode, Mindjet MindManager, Curio, or MindMeister. These applications can read and write mind maps in various forms, including *indented text*, at least as an "import” option. As a fan of plain text artifacts, I like indented text best!


## Traceability to the goals

How do we know that goals have be reached? Conversely, how do we know why a given module of code has been built in the first place?

There are goals which requested new business behaviors. In this case, acceptance tests provide the link between the code implementing the behavior and the goal. Whatever the way the goals are described, the tests could have an explicit reference to the goal name or identifier. Acceptance tests usually describe functional behavior, but they can just as well describe other quality attributes like response times, compatibility with a given piece of software or hardware, or even fault-tolerance requirements.

Some goals have related performance targets that cannot be measured at compile time. In this case the performance targets can become thresholds into your monitoring tools, and they could have clear labels that link to the goals documented elsewhere.

Sometimes the goals are described in fuzzy terms like "rush hours" or "DoS Attack". As such they are not quantifiable and therefore not testable or monitorable. However carefully curated data sets can help describe more precisely the phrasing of the expected performances. For example a recorded file of market data activity during a highly volatile market episode can accurately describe what is meant by "highly-volatile markets", or a situation of "market crash", "quiet period" or "opening rush". These files can also be used as a basis for acceptance testing.


## Stable Knowledge can also be code

W> The below idea is fresh and experimental. Try at your own risks!

An Evergreen Document does not have to be English prose or Markdown, it can also be structured as code. Code is an attractive media:

- The compiler enforces every reference from code to code, if a link is broken the compiler throws errors
- Code is easy to refactor with good tool support. You can rename one site and have all the references to it updated safely by the tool.
- Code is formal and easy to parse by tools to process it. You can turn it into various kinds of diagrams, filter items out, enforce stuff, check inconsistencies, or export into a format suitable for another tool.

It's not difficult to turn a tree of goals into code as an internal DSL (Domain-Specific Language). A tree is easy to encode in any programming language. If your goals are documented as a tree expressed in the programming language of the project, you can reference items of the impact map directly from the code, for traceability purposes.

For example, you can add annotations to declare what impact your module is targeting: @ImplementedImpact(MyImpacts.REDUCE__PROCESSING_COST).
